
ODC_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003754  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00003754  000037c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002dd8  00000000  00000000  00003904  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001d56  00000000  00000000  000066dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008432  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000085d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000087c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000abcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000bf55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000d5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000df50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6f 17 	call	0x2ede	; 0x2ede <main>
      7a:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e6       	ldi	r22, 0x6F	; 111
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e9 58       	subi	r30, 0x89	; 137
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <M_Timer_Init_Interrupt_Normal>:


#include "M_Timer_Driver.h"
#include <avr/interrupt.h>
#define F_CPU 1000000UL
void M_Timer_Init_Interrupt_Normal(u32 delay_ms,u32 prescaler){
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	61 97       	sbiw	r28, 0x11	; 17
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	9f 87       	std	Y+15, r25	; 0x0f
     e3c:	8e 87       	std	Y+14, r24	; 0x0e
     e3e:	79 8b       	std	Y+17, r23	; 0x11
     e40:	68 8b       	std	Y+16, r22	; 0x10
	u32 overFlowCounter=0,numOfOverFlow=0;
     e42:	1d 86       	std	Y+13, r1	; 0x0d
     e44:	1c 86       	std	Y+12, r1	; 0x0c
     e46:	1b 86       	std	Y+11, r1	; 0x0b
     e48:	1a 86       	std	Y+10, r1	; 0x0a
	u8 initial_value=0;
     e4a:	19 86       	std	Y+9, r1	; 0x09
	float T_tick=1/(F_CPU/prescaler);// 256Msec
     e4c:	88 89       	ldd	r24, Y+16	; 0x10
     e4e:	99 89       	ldd	r25, Y+17	; 0x11
     e50:	9c 01       	movw	r18, r24
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	80 e4       	ldi	r24, 0x40	; 64
     e58:	92 e4       	ldi	r25, 0x42	; 66
     e5a:	af e0       	ldi	r26, 0x0F	; 15
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodsi4>
     e66:	da 01       	movw	r26, r20
     e68:	c9 01       	movw	r24, r18
     e6a:	9c 01       	movw	r18, r24
     e6c:	ad 01       	movw	r20, r26
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	bc 01       	movw	r22, r24
     e78:	cd 01       	movw	r24, r26
     e7a:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodsi4>
     e7e:	da 01       	movw	r26, r20
     e80:	c9 01       	movw	r24, r18
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	8d 83       	std	Y+5, r24	; 0x05
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	af 83       	std	Y+7, r26	; 0x07
     e94:	b8 87       	std	Y+8, r27	; 0x08
	float maxDelay=T_tick*REGISTER_8BIT_VALUE;
     e96:	6d 81       	ldd	r22, Y+5	; 0x05
     e98:	7e 81       	ldd	r23, Y+6	; 0x06
     e9a:	8f 81       	ldd	r24, Y+7	; 0x07
     e9c:	98 85       	ldd	r25, Y+8	; 0x08
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	53 e4       	ldi	r21, 0x43	; 67
     ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	ab 83       	std	Y+3, r26	; 0x03
     eb4:	bc 83       	std	Y+4, r27	; 0x04
	sei(); //1.Enable Interrupt
     eb6:	78 94       	sei
	SET_BIT(M_TIMER_TIMSK,0);
     eb8:	ac e5       	ldi	r26, 0x5C	; 92
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ec e5       	ldi	r30, 0x5C	; 92
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	8c 93       	st	X, r24
	if (delay_ms>(maxDelay*1000)){
     ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec8:	9f 85       	ldd	r25, Y+15	; 0x0f
     eca:	cc 01       	movw	r24, r24
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
     ed8:	7b 01       	movw	r14, r22
     eda:	8c 01       	movw	r16, r24
     edc:	69 81       	ldd	r22, Y+1	; 0x01
     ede:	7a 81       	ldd	r23, Y+2	; 0x02
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a e7       	ldi	r20, 0x7A	; 122
     eea:	54 e4       	ldi	r21, 0x44	; 68
     eec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9c 01       	movw	r18, r24
     ef6:	ad 01       	movw	r20, r26
     ef8:	c8 01       	movw	r24, r16
     efa:	b7 01       	movw	r22, r14
     efc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f00:	18 16       	cp	r1, r24
     f02:	0c f0       	brlt	.+2      	; 0xf06 <M_Timer_Init_Interrupt_Normal+0xe8>
     f04:	4a c0       	rjmp	.+148    	; 0xf9a <M_Timer_Init_Interrupt_Normal+0x17c>

		numOfOverFlow=(delay_ms/maxDelay);
     f06:	8e 85       	ldd	r24, Y+14	; 0x0e
     f08:	9f 85       	ldd	r25, Y+15	; 0x0f
     f0a:	cc 01       	movw	r24, r24
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	3a 81       	ldd	r19, Y+2	; 0x02
     f24:	4b 81       	ldd	r20, Y+3	; 0x03
     f26:	5c 81       	ldd	r21, Y+4	; 0x04
     f28:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	9b 87       	std	Y+11, r25	; 0x0b
     f3e:	8a 87       	std	Y+10, r24	; 0x0a
		M_TIMER_TCNT0=initial_value;      //2.set initial value for timer
     f40:	e2 e5       	ldi	r30, 0x52	; 82
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	80 83       	st	Z, r24
		//3.start timing by select prescaling from TCCR0 reg
				SET_BIT(M_TIMER_TCCR0,CS02);
     f48:	a3 e5       	ldi	r26, 0x53	; 83
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e3 e5       	ldi	r30, 0x53	; 83
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	84 60       	ori	r24, 0x04	; 4
     f54:	8c 93       	st	X, r24
     f56:	15 c0       	rjmp	.+42     	; 0xf82 <M_Timer_Init_Interrupt_Normal+0x164>
			while(overFlowCounter<=numOfOverFlow)
					{
						while(READ_BIT(M_TIMER_TIFR,0)==0);
     f58:	e8 e5       	ldi	r30, 0x58	; 88
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	90 70       	andi	r25, 0x00	; 0
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	b9 f3       	breq	.-18     	; 0xf58 <M_Timer_Init_Interrupt_Normal+0x13a>
						//clear overflow flag
						M_TIMER_TIFR|=(1<<0);
     f6a:	a8 e5       	ldi	r26, 0x58	; 88
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e8 e5       	ldi	r30, 0x58	; 88
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	8c 93       	st	X, r24
						overFlowCounter++;
     f78:	8c 85       	ldd	r24, Y+12	; 0x0c
     f7a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	9d 87       	std	Y+13, r25	; 0x0d
     f80:	8c 87       	std	Y+12, r24	; 0x0c

		numOfOverFlow=(delay_ms/maxDelay);
		M_TIMER_TCNT0=initial_value;      //2.set initial value for timer
		//3.start timing by select prescaling from TCCR0 reg
				SET_BIT(M_TIMER_TCCR0,CS02);
			while(overFlowCounter<=numOfOverFlow)
     f82:	2c 85       	ldd	r18, Y+12	; 0x0c
     f84:	3d 85       	ldd	r19, Y+13	; 0x0d
     f86:	8a 85       	ldd	r24, Y+10	; 0x0a
     f88:	9b 85       	ldd	r25, Y+11	; 0x0b
     f8a:	82 17       	cp	r24, r18
     f8c:	93 07       	cpc	r25, r19
     f8e:	20 f7       	brcc	.-56     	; 0xf58 <M_Timer_Init_Interrupt_Normal+0x13a>
						while(READ_BIT(M_TIMER_TIFR,0)==0);
						//clear overflow flag
						M_TIMER_TIFR|=(1<<0);
						overFlowCounter++;
					}
			overFlowCounter=0;
     f90:	1d 86       	std	Y+13, r1	; 0x0d
     f92:	1c 86       	std	Y+12, r1	; 0x0c
					//stop timer
			M_TIMER_TCCR0=0x00;
     f94:	e3 e5       	ldi	r30, 0x53	; 83
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	10 82       	st	Z, r1


	}


}
     f9a:	61 96       	adiw	r28, 0x11	; 17
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	08 95       	ret

00000fb4 <M_DIO_SetPinDirection>:
 *  Created on: Sep 5, 2024
 *      Author: Afrotto
 */
#include "M_DIO_Init.h"

ERROR_STATE_T M_DIO_SetPinDirection(u8 portName,u8 pinNumber,u8 dir){
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	28 97       	sbiw	r28, 0x08	; 8
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	8a 83       	std	Y+2, r24	; 0x02
     fca:	6b 83       	std	Y+3, r22	; 0x03
     fcc:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATE_T retVal=NOK;
     fce:	19 82       	std	Y+1, r1	; 0x01
	if ((pinNumber>=PIN0) && (pinNumber<=PIN7))
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <M_DIO_SetPinDirection+0x24>
     fd6:	ea c0       	rjmp	.+468    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
	{
		if (dir==OUTPUT)
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <M_DIO_SetPinDirection+0x2c>
     fde:	6f c0       	rjmp	.+222    	; 0x10be <M_DIO_SetPinDirection+0x10a>
		{
			switch(portName){
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	38 87       	std	Y+8, r19	; 0x08
     fe8:	2f 83       	std	Y+7, r18	; 0x07
     fea:	8f 81       	ldd	r24, Y+7	; 0x07
     fec:	98 85       	ldd	r25, Y+8	; 0x08
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	49 f1       	breq	.+82     	; 0x1046 <M_DIO_SetPinDirection+0x92>
     ff4:	2f 81       	ldd	r18, Y+7	; 0x07
     ff6:	38 85       	ldd	r19, Y+8	; 0x08
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	2c f4       	brge	.+10     	; 0x1008 <M_DIO_SetPinDirection+0x54>
     ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    1000:	98 85       	ldd	r25, Y+8	; 0x08
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	61 f0       	breq	.+24     	; 0x101e <M_DIO_SetPinDirection+0x6a>
    1006:	d2 c0       	rjmp	.+420    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
    1008:	2f 81       	ldd	r18, Y+7	; 0x07
    100a:	38 85       	ldd	r19, Y+8	; 0x08
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	71 f1       	breq	.+92     	; 0x106e <M_DIO_SetPinDirection+0xba>
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	98 85       	ldd	r25, Y+8	; 0x08
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	e9 f1       	breq	.+122    	; 0x1096 <M_DIO_SetPinDirection+0xe2>
    101c:	c7 c0       	rjmp	.+398    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_A:SET_BIT(MDIO_DDRA,pinNumber);break;
    101e:	aa e3       	ldi	r26, 0x3A	; 58
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ea e3       	ldi	r30, 0x3A	; 58
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <M_DIO_SetPinDirection+0x88>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <M_DIO_SetPinDirection+0x84>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	b3 c0       	rjmp	.+358    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_B:SET_BIT(MDIO_DDRB,pinNumber);break;
    1046:	a7 e3       	ldi	r26, 0x37	; 55
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e7 e3       	ldi	r30, 0x37	; 55
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <M_DIO_SetPinDirection+0xb0>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <M_DIO_SetPinDirection+0xac>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	9f c0       	rjmp	.+318    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_C:SET_BIT(MDIO_DDRC,pinNumber);break;
    106e:	a4 e3       	ldi	r26, 0x34	; 52
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e4 e3       	ldi	r30, 0x34	; 52
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <M_DIO_SetPinDirection+0xd8>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <M_DIO_SetPinDirection+0xd4>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	8b c0       	rjmp	.+278    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_D:SET_BIT(MDIO_DDRD,pinNumber);break;
    1096:	a1 e3       	ldi	r26, 0x31	; 49
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <M_DIO_SetPinDirection+0x100>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <M_DIO_SetPinDirection+0xfc>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	77 c0       	rjmp	.+238    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			retVal=OK;
			}
		}
		else if(dir==INPUT) {
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	88 23       	and	r24, r24
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <M_DIO_SetPinDirection+0x112>
    10c4:	73 c0       	rjmp	.+230    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			switch(portName){
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3e 83       	std	Y+6, r19	; 0x06
    10ce:	2d 83       	std	Y+5, r18	; 0x05
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	9e 81       	ldd	r25, Y+6	; 0x06
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	59 f1       	breq	.+86     	; 0x1130 <M_DIO_SetPinDirection+0x17c>
    10da:	2d 81       	ldd	r18, Y+5	; 0x05
    10dc:	3e 81       	ldd	r19, Y+6	; 0x06
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <M_DIO_SetPinDirection+0x13a>
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	69 f0       	breq	.+26     	; 0x1106 <M_DIO_SetPinDirection+0x152>
    10ec:	5f c0       	rjmp	.+190    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
    10ee:	2d 81       	ldd	r18, Y+5	; 0x05
    10f0:	3e 81       	ldd	r19, Y+6	; 0x06
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	89 f1       	breq	.+98     	; 0x115a <M_DIO_SetPinDirection+0x1a6>
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <M_DIO_SetPinDirection+0x150>
    1102:	40 c0       	rjmp	.+128    	; 0x1184 <M_DIO_SetPinDirection+0x1d0>
    1104:	53 c0       	rjmp	.+166    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_A:CLR_BIT(MDIO_DDRA,pinNumber);break;
    1106:	aa e3       	ldi	r26, 0x3A	; 58
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <M_DIO_SetPinDirection+0x170>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <M_DIO_SetPinDirection+0x16c>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	3e c0       	rjmp	.+124    	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_B:CLR_BIT(MDIO_DDRB,pinNumber);break;
    1130:	a7 e3       	ldi	r26, 0x37	; 55
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e7 e3       	ldi	r30, 0x37	; 55
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <M_DIO_SetPinDirection+0x19a>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <M_DIO_SetPinDirection+0x196>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	29 c0       	rjmp	.+82     	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_C:CLR_BIT(MDIO_DDRC,pinNumber);break;
    115a:	a4 e3       	ldi	r26, 0x34	; 52
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e4 e3       	ldi	r30, 0x34	; 52
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <M_DIO_SetPinDirection+0x1c4>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <M_DIO_SetPinDirection+0x1c0>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <M_DIO_SetPinDirection+0x1f8>
			case PORT_D:CLR_BIT(MDIO_DDRD,pinNumber);break;
    1184:	a1 e3       	ldi	r26, 0x31	; 49
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <M_DIO_SetPinDirection+0x1ee>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <M_DIO_SetPinDirection+0x1ea>
    11a6:	80 95       	com	r24
    11a8:	84 23       	and	r24, r20
    11aa:	8c 93       	st	X, r24
			retVal=OK;
			}
		}
	}
	return retVal;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ae:	28 96       	adiw	r28, 0x08	; 8
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <M_DIO_SetPinValue>:

ERROR_STATE_T M_DIO_SetPinValue(u8 portName,u8 pinNumber,u8 val){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	28 97       	sbiw	r28, 0x08	; 8
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	6b 83       	std	Y+3, r22	; 0x03
    11d8:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATE_T retVal=NOK;
    11da:	19 82       	std	Y+1, r1	; 0x01
		if ((pinNumber>=PIN0) && (pinNumber<=PIN7))
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	88 30       	cpi	r24, 0x08	; 8
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <M_DIO_SetPinValue+0x24>
    11e2:	ea c0       	rjmp	.+468    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
		{
			if (val==HIGH)
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	09 f0       	breq	.+2      	; 0x11ec <M_DIO_SetPinValue+0x2c>
    11ea:	6f c0       	rjmp	.+222    	; 0x12ca <M_DIO_SetPinValue+0x10a>
			{
				switch(portName){
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	38 87       	std	Y+8, r19	; 0x08
    11f4:	2f 83       	std	Y+7, r18	; 0x07
    11f6:	8f 81       	ldd	r24, Y+7	; 0x07
    11f8:	98 85       	ldd	r25, Y+8	; 0x08
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	49 f1       	breq	.+82     	; 0x1252 <M_DIO_SetPinValue+0x92>
    1200:	2f 81       	ldd	r18, Y+7	; 0x07
    1202:	38 85       	ldd	r19, Y+8	; 0x08
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <M_DIO_SetPinValue+0x54>
    120a:	8f 81       	ldd	r24, Y+7	; 0x07
    120c:	98 85       	ldd	r25, Y+8	; 0x08
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	61 f0       	breq	.+24     	; 0x122a <M_DIO_SetPinValue+0x6a>
    1212:	d2 c0       	rjmp	.+420    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
    1214:	2f 81       	ldd	r18, Y+7	; 0x07
    1216:	38 85       	ldd	r19, Y+8	; 0x08
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	71 f1       	breq	.+92     	; 0x127a <M_DIO_SetPinValue+0xba>
    121e:	8f 81       	ldd	r24, Y+7	; 0x07
    1220:	98 85       	ldd	r25, Y+8	; 0x08
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	e9 f1       	breq	.+122    	; 0x12a2 <M_DIO_SetPinValue+0xe2>
    1228:	c7 c0       	rjmp	.+398    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_A:SET_BIT(MDIO_PORTA,pinNumber);break;
    122a:	ab e3       	ldi	r26, 0x3B	; 59
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	eb e3       	ldi	r30, 0x3B	; 59
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <M_DIO_SetPinValue+0x88>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <M_DIO_SetPinValue+0x84>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	b3 c0       	rjmp	.+358    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_B:SET_BIT(MDIO_PORTB,pinNumber);break;
    1252:	a8 e3       	ldi	r26, 0x38	; 56
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <M_DIO_SetPinValue+0xb0>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <M_DIO_SetPinValue+0xac>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	9f c0       	rjmp	.+318    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_C:SET_BIT(MDIO_PORTC,pinNumber);break;
    127a:	a5 e3       	ldi	r26, 0x35	; 53
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e5 e3       	ldi	r30, 0x35	; 53
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <M_DIO_SetPinValue+0xd8>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <M_DIO_SetPinValue+0xd4>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	8b c0       	rjmp	.+278    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_D:SET_BIT(MDIO_PORTD,pinNumber);break;
    12a2:	a2 e3       	ldi	r26, 0x32	; 50
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e2 e3       	ldi	r30, 0x32	; 50
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <M_DIO_SetPinValue+0x100>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <M_DIO_SetPinValue+0xfc>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	77 c0       	rjmp	.+238    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				retVal=OK;
				}
			}
			else if(val==LOW) {
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	88 23       	and	r24, r24
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <M_DIO_SetPinValue+0x112>
    12d0:	73 c0       	rjmp	.+230    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				switch(portName){
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3e 83       	std	Y+6, r19	; 0x06
    12da:	2d 83       	std	Y+5, r18	; 0x05
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	59 f1       	breq	.+86     	; 0x133c <M_DIO_SetPinValue+0x17c>
    12e6:	2d 81       	ldd	r18, Y+5	; 0x05
    12e8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <M_DIO_SetPinValue+0x13a>
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	69 f0       	breq	.+26     	; 0x1312 <M_DIO_SetPinValue+0x152>
    12f8:	5f c0       	rjmp	.+190    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
    12fa:	2d 81       	ldd	r18, Y+5	; 0x05
    12fc:	3e 81       	ldd	r19, Y+6	; 0x06
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	89 f1       	breq	.+98     	; 0x1366 <M_DIO_SetPinValue+0x1a6>
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <M_DIO_SetPinValue+0x150>
    130e:	40 c0       	rjmp	.+128    	; 0x1390 <M_DIO_SetPinValue+0x1d0>
    1310:	53 c0       	rjmp	.+166    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_A:CLR_BIT(MDIO_PORTA,pinNumber);break;
    1312:	ab e3       	ldi	r26, 0x3B	; 59
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <M_DIO_SetPinValue+0x170>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <M_DIO_SetPinValue+0x16c>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	3e c0       	rjmp	.+124    	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_B:CLR_BIT(MDIO_PORTB,pinNumber);break;
    133c:	a8 e3       	ldi	r26, 0x38	; 56
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e8 e3       	ldi	r30, 0x38	; 56
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <M_DIO_SetPinValue+0x19a>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <M_DIO_SetPinValue+0x196>
    135e:	80 95       	com	r24
    1360:	84 23       	and	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	29 c0       	rjmp	.+82     	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_C:CLR_BIT(MDIO_PORTC,pinNumber);break;
    1366:	a5 e3       	ldi	r26, 0x35	; 53
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <M_DIO_SetPinValue+0x1c4>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <M_DIO_SetPinValue+0x1c0>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <M_DIO_SetPinValue+0x1f8>
				case PORT_D:CLR_BIT(MDIO_PORTD,pinNumber);break;
    1390:	a2 e3       	ldi	r26, 0x32	; 50
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e2 e3       	ldi	r30, 0x32	; 50
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <M_DIO_SetPinValue+0x1ee>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <M_DIO_SetPinValue+0x1ea>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
				retVal=OK;
				}
			}
		}
		return retVal;
    13b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    13ba:	28 96       	adiw	r28, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <M_DIO_GetPinValue>:

ERROR_STATE_T M_DIO_GetPinValue(u8 portName,u8 pinNumber,u8 *val){
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	27 97       	sbiw	r28, 0x07	; 7
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	8a 83       	std	Y+2, r24	; 0x02
    13e2:	6b 83       	std	Y+3, r22	; 0x03
    13e4:	5d 83       	std	Y+5, r21	; 0x05
    13e6:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATE_T retVal=NOK;
    13e8:	19 82       	std	Y+1, r1	; 0x01
	if(*val != NULL){
    13ea:	ec 81       	ldd	r30, Y+4	; 0x04
    13ec:	fd 81       	ldd	r31, Y+5	; 0x05
    13ee:	80 81       	ld	r24, Z
    13f0:	88 23       	and	r24, r24
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <M_DIO_GetPinValue+0x2a>
    13f4:	74 c0       	rjmp	.+232    	; 0x14de <M_DIO_GetPinValue+0x112>
			if ((pinNumber>=PIN0) && (pinNumber<=PIN7))
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <M_DIO_GetPinValue+0x32>
    13fc:	70 c0       	rjmp	.+224    	; 0x14de <M_DIO_GetPinValue+0x112>
			{
					switch(portName){
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3f 83       	std	Y+7, r19	; 0x07
    1406:	2e 83       	std	Y+6, r18	; 0x06
    1408:	4e 81       	ldd	r20, Y+6	; 0x06
    140a:	5f 81       	ldd	r21, Y+7	; 0x07
    140c:	41 30       	cpi	r20, 0x01	; 1
    140e:	51 05       	cpc	r21, r1
    1410:	59 f1       	breq	.+86     	; 0x1468 <M_DIO_GetPinValue+0x9c>
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	9f 81       	ldd	r25, Y+7	; 0x07
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	91 05       	cpc	r25, r1
    141a:	34 f4       	brge	.+12     	; 0x1428 <M_DIO_GetPinValue+0x5c>
    141c:	2e 81       	ldd	r18, Y+6	; 0x06
    141e:	3f 81       	ldd	r19, Y+7	; 0x07
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	69 f0       	breq	.+26     	; 0x1440 <M_DIO_GetPinValue+0x74>
    1426:	5b c0       	rjmp	.+182    	; 0x14de <M_DIO_GetPinValue+0x112>
    1428:	4e 81       	ldd	r20, Y+6	; 0x06
    142a:	5f 81       	ldd	r21, Y+7	; 0x07
    142c:	42 30       	cpi	r20, 0x02	; 2
    142e:	51 05       	cpc	r21, r1
    1430:	79 f1       	breq	.+94     	; 0x1490 <M_DIO_GetPinValue+0xc4>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <M_DIO_GetPinValue+0x72>
    143c:	3d c0       	rjmp	.+122    	; 0x14b8 <M_DIO_GetPinValue+0xec>
    143e:	4f c0       	rjmp	.+158    	; 0x14de <M_DIO_GetPinValue+0x112>
					case PORT_A:*val=READ_BIT(MDIO_PINA,pinNumber);break;
    1440:	e9 e3       	ldi	r30, 0x39	; 57
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <M_DIO_GetPinValue+0x8c>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <M_DIO_GetPinValue+0x88>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	ec 81       	ldd	r30, Y+4	; 0x04
    1462:	fd 81       	ldd	r31, Y+5	; 0x05
    1464:	80 83       	st	Z, r24
    1466:	3b c0       	rjmp	.+118    	; 0x14de <M_DIO_GetPinValue+0x112>
					case PORT_B:*val=READ_BIT(MDIO_PINB,pinNumber);break;
    1468:	e6 e3       	ldi	r30, 0x36	; 54
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <M_DIO_GetPinValue+0xb4>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <M_DIO_GetPinValue+0xb0>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	ec 81       	ldd	r30, Y+4	; 0x04
    148a:	fd 81       	ldd	r31, Y+5	; 0x05
    148c:	80 83       	st	Z, r24
    148e:	27 c0       	rjmp	.+78     	; 0x14de <M_DIO_GetPinValue+0x112>
					case PORT_C:*val=READ_BIT(MDIO_PINC,pinNumber);break;
    1490:	e3 e3       	ldi	r30, 0x33	; 51
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <M_DIO_GetPinValue+0xdc>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <M_DIO_GetPinValue+0xd8>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	ec 81       	ldd	r30, Y+4	; 0x04
    14b2:	fd 81       	ldd	r31, Y+5	; 0x05
    14b4:	80 83       	st	Z, r24
    14b6:	13 c0       	rjmp	.+38     	; 0x14de <M_DIO_GetPinValue+0x112>
					case PORT_D:*val=READ_BIT(MDIO_PIND,pinNumber);break;
    14b8:	e0 e3       	ldi	r30, 0x30	; 48
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <M_DIO_GetPinValue+0x104>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <M_DIO_GetPinValue+0x100>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	ec 81       	ldd	r30, Y+4	; 0x04
    14da:	fd 81       	ldd	r31, Y+5	; 0x05
    14dc:	80 83       	st	Z, r24
					retVal=OK;
					}
			}
	}
			return retVal;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e0:	27 96       	adiw	r28, 0x07	; 7
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <M_DIO_SetPortValue>:


ERROR_STATE_T M_DIO_SetPortValue(u8 portName,u8 val){
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <M_DIO_SetPortValue+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <M_DIO_SetPortValue+0x8>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	8a 83       	std	Y+2, r24	; 0x02
    1502:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATE_T retVal=NOK;
    1504:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3d 83       	std	Y+5, r19	; 0x05
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	d1 f0       	breq	.+52     	; 0x154e <M_DIO_SetPortValue+0x5c>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <M_DIO_SetPortValue+0x3c>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <M_DIO_SetPortValue+0x52>
    152c:	1e c0       	rjmp	.+60     	; 0x156a <M_DIO_SetPortValue+0x78>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <M_DIO_SetPortValue+0x66>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <M_DIO_SetPortValue+0x70>
    1542:	13 c0       	rjmp	.+38     	; 0x156a <M_DIO_SetPortValue+0x78>
	case PORT_A:MDIO_PORTA=val;break;
    1544:	eb e3       	ldi	r30, 0x3B	; 59
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	80 83       	st	Z, r24
    154c:	0e c0       	rjmp	.+28     	; 0x156a <M_DIO_SetPortValue+0x78>
	case PORT_B:MDIO_PORTB=val;break;
    154e:	e8 e3       	ldi	r30, 0x38	; 56
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	80 83       	st	Z, r24
    1556:	09 c0       	rjmp	.+18     	; 0x156a <M_DIO_SetPortValue+0x78>
	case PORT_C:MDIO_PORTC=val;break;
    1558:	e5 e3       	ldi	r30, 0x35	; 53
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	80 83       	st	Z, r24
    1560:	04 c0       	rjmp	.+8      	; 0x156a <M_DIO_SetPortValue+0x78>
	case PORT_D:MDIO_PORTD=val;break;
    1562:	e2 e3       	ldi	r30, 0x32	; 50
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	80 83       	st	Z, r24
	retVal=OK;
	}
	return retVal;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <M_DIO_GetPortValue>:

ERROR_STATE_T M_DIO_GetPortValue(u8 portName,u8 *val){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <M_DIO_GetPortValue+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <M_DIO_GetPortValue+0x8>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <M_DIO_GetPortValue+0xa>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	7c 83       	std	Y+4, r23	; 0x04
    158e:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATE_T retVal=NOK;
    1590:	19 82       	std	Y+1, r1	; 0x01
	if(*val != NULL){
    1592:	eb 81       	ldd	r30, Y+3	; 0x03
    1594:	fc 81       	ldd	r31, Y+4	; 0x04
    1596:	80 81       	ld	r24, Z
    1598:	88 23       	and	r24, r24
    159a:	d1 f1       	breq	.+116    	; 0x1610 <M_DIO_GetPortValue+0x94>
	switch(portName){
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	3e 83       	std	Y+6, r19	; 0x06
    15a4:	2d 83       	std	Y+5, r18	; 0x05
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	91 05       	cpc	r25, r1
    15ae:	e1 f0       	breq	.+56     	; 0x15e8 <M_DIO_GetPortValue+0x6c>
    15b0:	2d 81       	ldd	r18, Y+5	; 0x05
    15b2:	3e 81       	ldd	r19, Y+6	; 0x06
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <M_DIO_GetPortValue+0x48>
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	61 f0       	breq	.+24     	; 0x15da <M_DIO_GetPortValue+0x5e>
    15c2:	26 c0       	rjmp	.+76     	; 0x1610 <M_DIO_GetPortValue+0x94>
    15c4:	2d 81       	ldd	r18, Y+5	; 0x05
    15c6:	3e 81       	ldd	r19, Y+6	; 0x06
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	a1 f0       	breq	.+40     	; 0x15f6 <M_DIO_GetPortValue+0x7a>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	91 05       	cpc	r25, r1
    15d6:	b1 f0       	breq	.+44     	; 0x1604 <M_DIO_GetPortValue+0x88>
    15d8:	1b c0       	rjmp	.+54     	; 0x1610 <M_DIO_GetPortValue+0x94>
		case PORT_A:*val=MDIO_PORTA;break;
    15da:	eb e3       	ldi	r30, 0x3B	; 59
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	eb 81       	ldd	r30, Y+3	; 0x03
    15e2:	fc 81       	ldd	r31, Y+4	; 0x04
    15e4:	80 83       	st	Z, r24
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <M_DIO_GetPortValue+0x94>
		case PORT_B:*val=MDIO_PORTB;break;
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	80 83       	st	Z, r24
    15f4:	0d c0       	rjmp	.+26     	; 0x1610 <M_DIO_GetPortValue+0x94>
		case PORT_C:*val=MDIO_PORTC;break;
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	eb 81       	ldd	r30, Y+3	; 0x03
    15fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1600:	80 83       	st	Z, r24
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <M_DIO_GetPortValue+0x94>
		case PORT_D:*val=MDIO_PORTC;break;
    1604:	e5 e3       	ldi	r30, 0x35	; 53
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	80 83       	st	Z, r24
		retVal=OK;
		}
	}
		return retVal;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
}
    1612:	26 96       	adiw	r28, 0x06	; 6
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <M_DIO_SetPortDirection>:
ERROR_STATE_T M_DIO_SetPortDirection(u8 portName,u8 dir){
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <M_DIO_SetPortDirection+0x6>
    162a:	00 d0       	rcall	.+0      	; 0x162c <M_DIO_SetPortDirection+0x8>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	8a 83       	std	Y+2, r24	; 0x02
    1634:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATE_T retVal=NOK;
    1636:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3d 83       	std	Y+5, r19	; 0x05
    1640:	2c 83       	std	Y+4, r18	; 0x04
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	d1 f0       	breq	.+52     	; 0x1680 <M_DIO_SetPortDirection+0x5c>
    164c:	2c 81       	ldd	r18, Y+4	; 0x04
    164e:	3d 81       	ldd	r19, Y+5	; 0x05
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	2c f4       	brge	.+10     	; 0x1660 <M_DIO_SetPortDirection+0x3c>
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	61 f0       	breq	.+24     	; 0x1676 <M_DIO_SetPortDirection+0x52>
    165e:	1e c0       	rjmp	.+60     	; 0x169c <M_DIO_SetPortDirection+0x78>
    1660:	2c 81       	ldd	r18, Y+4	; 0x04
    1662:	3d 81       	ldd	r19, Y+5	; 0x05
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	81 f0       	breq	.+32     	; 0x168a <M_DIO_SetPortDirection+0x66>
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	9d 81       	ldd	r25, Y+5	; 0x05
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	91 05       	cpc	r25, r1
    1672:	81 f0       	breq	.+32     	; 0x1694 <M_DIO_SetPortDirection+0x70>
    1674:	13 c0       	rjmp	.+38     	; 0x169c <M_DIO_SetPortDirection+0x78>
	case PORT_A:MDIO_DDRA=dir;break;
    1676:	ea e3       	ldi	r30, 0x3A	; 58
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	80 83       	st	Z, r24
    167e:	0e c0       	rjmp	.+28     	; 0x169c <M_DIO_SetPortDirection+0x78>
	case PORT_B:MDIO_DDRB=dir;break;
    1680:	e7 e3       	ldi	r30, 0x37	; 55
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	80 83       	st	Z, r24
    1688:	09 c0       	rjmp	.+18     	; 0x169c <M_DIO_SetPortDirection+0x78>
	case PORT_C:MDIO_DDRC=dir;break;
    168a:	e4 e3       	ldi	r30, 0x34	; 52
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	80 83       	st	Z, r24
    1692:	04 c0       	rjmp	.+8      	; 0x169c <M_DIO_SetPortDirection+0x78>
	case PORT_D:MDIO_DDRD=dir;break;
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	80 83       	st	Z, r24
	retVal=OK;
	}
	return retVal;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <M_DIO_EnablPullup>:
ERROR_STATE_T M_DIO_EnablPullup(u8 portName, u8 pinNumber){
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <M_DIO_EnablPullup+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <M_DIO_EnablPullup+0x8>
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	8a 83       	std	Y+2, r24	; 0x02
    16be:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATE_T retVal=NOK;
    16c0:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3d 83       	std	Y+5, r19	; 0x05
    16ca:	2c 83       	std	Y+4, r18	; 0x04
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 05       	cpc	r25, r1
    16d4:	79 f1       	breq	.+94     	; 0x1734 <M_DIO_EnablPullup+0x86>
    16d6:	2c 81       	ldd	r18, Y+4	; 0x04
    16d8:	3d 81       	ldd	r19, Y+5	; 0x05
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <M_DIO_EnablPullup+0x3c>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	69 f0       	breq	.+26     	; 0x1702 <M_DIO_EnablPullup+0x54>
    16e8:	6f c0       	rjmp	.+222    	; 0x17c8 <M_DIO_EnablPullup+0x11a>
    16ea:	2c 81       	ldd	r18, Y+4	; 0x04
    16ec:	3d 81       	ldd	r19, Y+5	; 0x05
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	c9 f1       	breq	.+114    	; 0x1766 <M_DIO_EnablPullup+0xb8>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <M_DIO_EnablPullup+0x52>
    16fe:	4c c0       	rjmp	.+152    	; 0x1798 <M_DIO_EnablPullup+0xea>
    1700:	63 c0       	rjmp	.+198    	; 0x17c8 <M_DIO_EnablPullup+0x11a>
		case PORT_A:M_DIO_SetPinDirection(PORT_A,pinNumber,INPUT);SET_BIT(MDIO_PORTA,pinNumber);break;
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	6b 81       	ldd	r22, Y+3	; 0x03
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    170c:	ab e3       	ldi	r26, 0x3B	; 59
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	eb e3       	ldi	r30, 0x3B	; 59
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <M_DIO_EnablPullup+0x7c>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <M_DIO_EnablPullup+0x78>
    172e:	84 2b       	or	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	4a c0       	rjmp	.+148    	; 0x17c8 <M_DIO_EnablPullup+0x11a>
		case PORT_B:M_DIO_SetPinDirection(PORT_B,pinNumber,INPUT);SET_BIT(MDIO_PORTB,pinNumber);break;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	6b 81       	ldd	r22, Y+3	; 0x03
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    173e:	a8 e3       	ldi	r26, 0x38	; 56
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e8 e3       	ldi	r30, 0x38	; 56
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <M_DIO_EnablPullup+0xae>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <M_DIO_EnablPullup+0xaa>
    1760:	84 2b       	or	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	31 c0       	rjmp	.+98     	; 0x17c8 <M_DIO_EnablPullup+0x11a>
		case PORT_C:M_DIO_SetPinDirection(PORT_C,pinNumber,INPUT);SET_BIT(MDIO_PORTC,pinNumber);break;
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	6b 81       	ldd	r22, Y+3	; 0x03
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    1770:	a5 e3       	ldi	r26, 0x35	; 53
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e3       	ldi	r30, 0x35	; 53
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <M_DIO_EnablPullup+0xe0>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <M_DIO_EnablPullup+0xdc>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	18 c0       	rjmp	.+48     	; 0x17c8 <M_DIO_EnablPullup+0x11a>
		case PORT_D:M_DIO_SetPinDirection(PORT_D,pinNumber,INPUT);SET_BIT(MDIO_PORTD,pinNumber);break;
    1798:	83 e0       	ldi	r24, 0x03	; 3
    179a:	6b 81       	ldd	r22, Y+3	; 0x03
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <M_DIO_EnablPullup+0x112>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <M_DIO_EnablPullup+0x10e>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
		retVal=OK;
		}
	return retVal;
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <M_DIO_WriteHighNibble>:
ERROR_STATE_T M_DIO_WriteHighNibble(u8 portName,u8 data){
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <M_DIO_WriteHighNibble+0x6>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <M_DIO_WriteHighNibble+0x8>
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	6b 83       	std	Y+3, r22	; 0x03
	data<<=4;
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	82 95       	swap	r24
    17f0:	80 7f       	andi	r24, 0xF0	; 240
    17f2:	8b 83       	std	Y+3, r24	; 0x03
	ERROR_STATE_T retVal=NOK;
    17f4:	19 82       	std	Y+1, r1	; 0x01
		switch(portName){
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	3d 83       	std	Y+5, r19	; 0x05
    17fe:	2c 83       	std	Y+4, r18	; 0x04
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	91 05       	cpc	r25, r1
    1808:	29 f1       	breq	.+74     	; 0x1854 <M_DIO_WriteHighNibble+0x7a>
    180a:	2c 81       	ldd	r18, Y+4	; 0x04
    180c:	3d 81       	ldd	r19, Y+5	; 0x05
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	2c f4       	brge	.+10     	; 0x181e <M_DIO_WriteHighNibble+0x44>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	61 f0       	breq	.+24     	; 0x1834 <M_DIO_WriteHighNibble+0x5a>
    181c:	4a c0       	rjmp	.+148    	; 0x18b2 <M_DIO_WriteHighNibble+0xd8>
    181e:	2c 81       	ldd	r18, Y+4	; 0x04
    1820:	3d 81       	ldd	r19, Y+5	; 0x05
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	31 f1       	breq	.+76     	; 0x1874 <M_DIO_WriteHighNibble+0x9a>
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	91 05       	cpc	r25, r1
    1830:	89 f1       	breq	.+98     	; 0x1894 <M_DIO_WriteHighNibble+0xba>
    1832:	3f c0       	rjmp	.+126    	; 0x18b2 <M_DIO_WriteHighNibble+0xd8>
			case PORT_A:MDIO_PORTA&=0x0f; MDIO_PORTA|=data;break;
    1834:	ab e3       	ldi	r26, 0x3B	; 59
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	eb e3       	ldi	r30, 0x3B	; 59
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8f 70       	andi	r24, 0x0F	; 15
    1840:	8c 93       	st	X, r24
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	90 81       	ld	r25, Z
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	89 2b       	or	r24, r25
    1850:	8c 93       	st	X, r24
    1852:	2f c0       	rjmp	.+94     	; 0x18b2 <M_DIO_WriteHighNibble+0xd8>
			case PORT_B:MDIO_PORTB&=0x0f; MDIO_PORTB|=data;break;
    1854:	a8 e3       	ldi	r26, 0x38	; 56
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e8 e3       	ldi	r30, 0x38	; 56
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 70       	andi	r24, 0x0F	; 15
    1860:	8c 93       	st	X, r24
    1862:	a8 e3       	ldi	r26, 0x38	; 56
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e8 e3       	ldi	r30, 0x38	; 56
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	90 81       	ld	r25, Z
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	89 2b       	or	r24, r25
    1870:	8c 93       	st	X, r24
    1872:	1f c0       	rjmp	.+62     	; 0x18b2 <M_DIO_WriteHighNibble+0xd8>
			case PORT_C:MDIO_PORTC&=0x0f; MDIO_PORTC|=data;break;
    1874:	a5 e3       	ldi	r26, 0x35	; 53
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e5 e3       	ldi	r30, 0x35	; 53
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8f 70       	andi	r24, 0x0F	; 15
    1880:	8c 93       	st	X, r24
    1882:	a5 e3       	ldi	r26, 0x35	; 53
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	90 81       	ld	r25, Z
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	89 2b       	or	r24, r25
    1890:	8c 93       	st	X, r24
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <M_DIO_WriteHighNibble+0xd8>
			case PORT_D:MDIO_PORTD&=0x0f; MDIO_PORTA|=data;break;
    1894:	a2 e3       	ldi	r26, 0x32	; 50
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e2 e3       	ldi	r30, 0x32	; 50
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8f 70       	andi	r24, 0x0F	; 15
    18a0:	8c 93       	st	X, r24
    18a2:	ab e3       	ldi	r26, 0x3B	; 59
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	eb e3       	ldi	r30, 0x3B	; 59
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	90 81       	ld	r25, Z
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	89 2b       	or	r24, r25
    18b0:	8c 93       	st	X, r24
			retVal=OK;
			}
		return retVal;
    18b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <M_DIO_WriteLowNibble>:
ERROR_STATE_T M_DIO_WriteLowNibble(u8 portName,u8 data){
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <M_DIO_WriteLowNibble+0x6>
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <M_DIO_WriteLowNibble+0x8>
    18cc:	0f 92       	push	r0
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	6b 83       	std	Y+3, r22	; 0x03
	data&=0x0f;
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	8f 70       	andi	r24, 0x0F	; 15
    18da:	8b 83       	std	Y+3, r24	; 0x03
	ERROR_STATE_T retVal=NOK;
    18dc:	19 82       	std	Y+1, r1	; 0x01
		switch(portName){
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	3d 83       	std	Y+5, r19	; 0x05
    18e6:	2c 83       	std	Y+4, r18	; 0x04
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	29 f1       	breq	.+74     	; 0x193c <M_DIO_WriteLowNibble+0x78>
    18f2:	2c 81       	ldd	r18, Y+4	; 0x04
    18f4:	3d 81       	ldd	r19, Y+5	; 0x05
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	2c f4       	brge	.+10     	; 0x1906 <M_DIO_WriteLowNibble+0x42>
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	61 f0       	breq	.+24     	; 0x191c <M_DIO_WriteLowNibble+0x58>
    1904:	4a c0       	rjmp	.+148    	; 0x199a <M_DIO_WriteLowNibble+0xd6>
    1906:	2c 81       	ldd	r18, Y+4	; 0x04
    1908:	3d 81       	ldd	r19, Y+5	; 0x05
    190a:	22 30       	cpi	r18, 0x02	; 2
    190c:	31 05       	cpc	r19, r1
    190e:	31 f1       	breq	.+76     	; 0x195c <M_DIO_WriteLowNibble+0x98>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	91 05       	cpc	r25, r1
    1918:	89 f1       	breq	.+98     	; 0x197c <M_DIO_WriteLowNibble+0xb8>
    191a:	3f c0       	rjmp	.+126    	; 0x199a <M_DIO_WriteLowNibble+0xd6>
			case PORT_A:MDIO_PORTA&=0xf0; MDIO_PORTA|=data;break;
    191c:	ab e3       	ldi	r26, 0x3B	; 59
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	eb e3       	ldi	r30, 0x3B	; 59
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	80 7f       	andi	r24, 0xF0	; 240
    1928:	8c 93       	st	X, r24
    192a:	ab e3       	ldi	r26, 0x3B	; 59
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	eb e3       	ldi	r30, 0x3B	; 59
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	90 81       	ld	r25, Z
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	89 2b       	or	r24, r25
    1938:	8c 93       	st	X, r24
    193a:	2f c0       	rjmp	.+94     	; 0x199a <M_DIO_WriteLowNibble+0xd6>
			case PORT_B:MDIO_PORTB&=0xf0; MDIO_PORTB|=data;break;
    193c:	a8 e3       	ldi	r26, 0x38	; 56
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e8 e3       	ldi	r30, 0x38	; 56
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 7f       	andi	r24, 0xF0	; 240
    1948:	8c 93       	st	X, r24
    194a:	a8 e3       	ldi	r26, 0x38	; 56
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e8 e3       	ldi	r30, 0x38	; 56
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	90 81       	ld	r25, Z
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	89 2b       	or	r24, r25
    1958:	8c 93       	st	X, r24
    195a:	1f c0       	rjmp	.+62     	; 0x199a <M_DIO_WriteLowNibble+0xd6>
			case PORT_C:MDIO_PORTC&=0xf0; MDIO_PORTC|=data;break;
    195c:	a5 e3       	ldi	r26, 0x35	; 53
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	80 7f       	andi	r24, 0xF0	; 240
    1968:	8c 93       	st	X, r24
    196a:	a5 e3       	ldi	r26, 0x35	; 53
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e3       	ldi	r30, 0x35	; 53
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	90 81       	ld	r25, Z
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	89 2b       	or	r24, r25
    1978:	8c 93       	st	X, r24
    197a:	0f c0       	rjmp	.+30     	; 0x199a <M_DIO_WriteLowNibble+0xd6>
			case PORT_D:MDIO_PORTD&=0xf0; MDIO_PORTA|=data;break;
    197c:	a2 e3       	ldi	r26, 0x32	; 50
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e3       	ldi	r30, 0x32	; 50
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 7f       	andi	r24, 0xF0	; 240
    1988:	8c 93       	st	X, r24
    198a:	ab e3       	ldi	r26, 0x3B	; 59
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb e3       	ldi	r30, 0x3B	; 59
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	90 81       	ld	r25, Z
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	89 2b       	or	r24, r25
    1998:	8c 93       	st	X, r24
			retVal=OK;
			}
		return retVal;
    199a:	89 81       	ldd	r24, Y+1	; 0x01

}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <H_SevenSegment_Init>:
 *  Created on: Sep 5, 2024
 *      Author: Nourhan Mohamed Hassan
 */
#include "H_Seven_Segment.h"
#include "H_Seven_Segment_CFG.h"
ERROR_STATE_T H_SevenSegment_Init(u8 portName){
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <H_SevenSegment_Init+0x6>
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <H_SevenSegment_Init+0x8>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_T retVal=NOK;
    19ba:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3c 83       	std	Y+4, r19	; 0x04
    19c4:	2b 83       	std	Y+3, r18	; 0x03
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	91 05       	cpc	r25, r1
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <H_SevenSegment_Init+0x58>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <H_SevenSegment_Init+0x38>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 f0       	breq	.+24     	; 0x19fa <H_SevenSegment_Init+0x4e>
    19e2:	1e c0       	rjmp	.+60     	; 0x1a20 <H_SevenSegment_Init+0x74>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <H_SevenSegment_Init+0x62>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <H_SevenSegment_Init+0x6c>
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <H_SevenSegment_Init+0x74>
	case PORT_A:M_DIO_SetPortDirection(portName,ALL_PORT_OUTPUT); break;
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	6f ef       	ldi	r22, 0xFF	; 255
    19fe:	0e 94 12 0b 	call	0x1624	; 0x1624 <M_DIO_SetPortDirection>
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <H_SevenSegment_Init+0x74>
	case PORT_B:M_DIO_SetPortDirection(portName,ALL_PORT_OUTPUT); break;
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	6f ef       	ldi	r22, 0xFF	; 255
    1a08:	0e 94 12 0b 	call	0x1624	; 0x1624 <M_DIO_SetPortDirection>
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <H_SevenSegment_Init+0x74>
	case PORT_C:M_DIO_SetPortDirection(portName,ALL_PORT_OUTPUT); break;
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	6f ef       	ldi	r22, 0xFF	; 255
    1a12:	0e 94 12 0b 	call	0x1624	; 0x1624 <M_DIO_SetPortDirection>
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <H_SevenSegment_Init+0x74>
	case PORT_D:M_DIO_SetPortDirection(portName,ALL_PORT_OUTPUT); break;
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	6f ef       	ldi	r22, 0xFF	; 255
    1a1c:	0e 94 12 0b 	call	0x1624	; 0x1624 <M_DIO_SetPortDirection>
	retVal=OK;
	}
	return retVal;
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <H_SevenSegment_Write_Cathode>:
ERROR_STATE_T H_SevenSegment_Write_Cathode(u8 data,u8 portName){
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	64 97       	sbiw	r28, 0x14	; 20
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	8c 87       	std	Y+12, r24	; 0x0c
    1a46:	6d 87       	std	Y+13, r22	; 0x0d
	u8 arrCathode[10]={
			0X3F,0X06,0X5B,0X4F,0X66,0X6D,0X7D,0X47,0X7F,0X6F
	};
    1a48:	9e 01       	movw	r18, r28
    1a4a:	2e 5f       	subi	r18, 0xFE	; 254
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	39 8b       	std	Y+17, r19	; 0x11
    1a50:	28 8b       	std	Y+16, r18	; 0x10
    1a52:	87 e7       	ldi	r24, 0x77	; 119
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	9b 8b       	std	Y+19, r25	; 0x13
    1a58:	8a 8b       	std	Y+18, r24	; 0x12
    1a5a:	9a e0       	ldi	r25, 0x0A	; 10
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a60:	fb 89       	ldd	r31, Y+19	; 0x13
    1a62:	00 80       	ld	r0, Z
    1a64:	2a 89       	ldd	r18, Y+18	; 0x12
    1a66:	3b 89       	ldd	r19, Y+19	; 0x13
    1a68:	2f 5f       	subi	r18, 0xFF	; 255
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	3b 8b       	std	Y+19, r19	; 0x13
    1a6e:	2a 8b       	std	Y+18, r18	; 0x12
    1a70:	e8 89       	ldd	r30, Y+16	; 0x10
    1a72:	f9 89       	ldd	r31, Y+17	; 0x11
    1a74:	00 82       	st	Z, r0
    1a76:	28 89       	ldd	r18, Y+16	; 0x10
    1a78:	39 89       	ldd	r19, Y+17	; 0x11
    1a7a:	2f 5f       	subi	r18, 0xFF	; 255
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	39 8b       	std	Y+17, r19	; 0x11
    1a80:	28 8b       	std	Y+16, r18	; 0x10
    1a82:	3c 89       	ldd	r19, Y+20	; 0x14
    1a84:	31 50       	subi	r19, 0x01	; 1
    1a86:	3c 8b       	std	Y+20, r19	; 0x14
    1a88:	8c 89       	ldd	r24, Y+20	; 0x14
    1a8a:	88 23       	and	r24, r24
    1a8c:	41 f7       	brne	.-48     	; 0x1a5e <H_SevenSegment_Write_Cathode+0x2e>
	ERROR_STATE_T retVal=NOK;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	e8 2f       	mov	r30, r24
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	ff 87       	std	Y+15, r31	; 0x0f
    1a98:	ee 87       	std	Y+14, r30	; 0x0e
    1a9a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a9c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a9e:	21 30       	cpi	r18, 0x01	; 1
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	11 f1       	breq	.+68     	; 0x1ae8 <H_SevenSegment_Write_Cathode+0xb8>
    1aa4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aa6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	91 05       	cpc	r25, r1
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <H_SevenSegment_Write_Cathode+0x88>
    1aae:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ab0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ab2:	30 97       	sbiw	r30, 0x00	; 0
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <H_SevenSegment_Write_Cathode+0x9e>
    1ab6:	3e c0       	rjmp	.+124    	; 0x1b34 <H_SevenSegment_Write_Cathode+0x104>
    1ab8:	2e 85       	ldd	r18, Y+14	; 0x0e
    1aba:	3f 85       	ldd	r19, Y+15	; 0x0f
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	01 f1       	breq	.+64     	; 0x1b02 <H_SevenSegment_Write_Cathode+0xd2>
    1ac2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	91 05       	cpc	r25, r1
    1aca:	41 f1       	breq	.+80     	; 0x1b1c <H_SevenSegment_Write_Cathode+0xec>
    1acc:	33 c0       	rjmp	.+102    	; 0x1b34 <H_SevenSegment_Write_Cathode+0x104>
	case PORT_A:M_DIO_SetPortValue(portName,*(arrCathode+data)); break;
    1ace:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	32 96       	adiw	r30, 0x02	; 2
    1ad8:	e8 0f       	add	r30, r24
    1ada:	f9 1f       	adc	r31, r25
    1adc:	90 81       	ld	r25, Z
    1ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae0:	69 2f       	mov	r22, r25
    1ae2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
    1ae6:	26 c0       	rjmp	.+76     	; 0x1b34 <H_SevenSegment_Write_Cathode+0x104>
	case PORT_B:M_DIO_SetPortValue(portName,*(arrCathode+data)); break;
    1ae8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	fe 01       	movw	r30, r28
    1af0:	32 96       	adiw	r30, 0x02	; 2
    1af2:	e8 0f       	add	r30, r24
    1af4:	f9 1f       	adc	r31, r25
    1af6:	90 81       	ld	r25, Z
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	69 2f       	mov	r22, r25
    1afc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
    1b00:	19 c0       	rjmp	.+50     	; 0x1b34 <H_SevenSegment_Write_Cathode+0x104>
	case PORT_C:M_DIO_SetPortValue(portName,*(arrCathode+data)); break;
    1b02:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	fe 01       	movw	r30, r28
    1b0a:	32 96       	adiw	r30, 0x02	; 2
    1b0c:	e8 0f       	add	r30, r24
    1b0e:	f9 1f       	adc	r31, r25
    1b10:	90 81       	ld	r25, Z
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	69 2f       	mov	r22, r25
    1b16:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
    1b1a:	0c c0       	rjmp	.+24     	; 0x1b34 <H_SevenSegment_Write_Cathode+0x104>
	case PORT_D:M_DIO_SetPortValue(portName,*(arrCathode+data)); break;
    1b1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	fe 01       	movw	r30, r28
    1b24:	32 96       	adiw	r30, 0x02	; 2
    1b26:	e8 0f       	add	r30, r24
    1b28:	f9 1f       	adc	r31, r25
    1b2a:	90 81       	ld	r25, Z
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	69 2f       	mov	r22, r25
    1b30:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
	retVal=OK;
	}
	return retVal;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	64 96       	adiw	r28, 0x14	; 20
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <H_SevenSegment_Write_Anode>:
ERROR_STATE_T H_SevenSegment_Write_Anode(u8 data,u8 portName){
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	64 97       	sbiw	r28, 0x14	; 20
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	8c 87       	std	Y+12, r24	; 0x0c
    1b5e:	6d 87       	std	Y+13, r22	; 0x0d
	u8 arrAnode[]={
	0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xB8,0x80,0x90
	};
    1b60:	9e 01       	movw	r18, r28
    1b62:	2e 5f       	subi	r18, 0xFE	; 254
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	39 8b       	std	Y+17, r19	; 0x11
    1b68:	28 8b       	std	Y+16, r18	; 0x10
    1b6a:	81 e8       	ldi	r24, 0x81	; 129
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	9b 8b       	std	Y+19, r25	; 0x13
    1b70:	8a 8b       	std	Y+18, r24	; 0x12
    1b72:	9a e0       	ldi	r25, 0x0A	; 10
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	ea 89       	ldd	r30, Y+18	; 0x12
    1b78:	fb 89       	ldd	r31, Y+19	; 0x13
    1b7a:	00 80       	ld	r0, Z
    1b7c:	2a 89       	ldd	r18, Y+18	; 0x12
    1b7e:	3b 89       	ldd	r19, Y+19	; 0x13
    1b80:	2f 5f       	subi	r18, 0xFF	; 255
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	3b 8b       	std	Y+19, r19	; 0x13
    1b86:	2a 8b       	std	Y+18, r18	; 0x12
    1b88:	e8 89       	ldd	r30, Y+16	; 0x10
    1b8a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b8c:	00 82       	st	Z, r0
    1b8e:	28 89       	ldd	r18, Y+16	; 0x10
    1b90:	39 89       	ldd	r19, Y+17	; 0x11
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	39 8b       	std	Y+17, r19	; 0x11
    1b98:	28 8b       	std	Y+16, r18	; 0x10
    1b9a:	3c 89       	ldd	r19, Y+20	; 0x14
    1b9c:	31 50       	subi	r19, 0x01	; 1
    1b9e:	3c 8b       	std	Y+20, r19	; 0x14
    1ba0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ba2:	88 23       	and	r24, r24
    1ba4:	41 f7       	brne	.-48     	; 0x1b76 <H_SevenSegment_Write_Anode+0x2e>
	ERROR_STATE_T retVal=NOK;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    1ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1baa:	e8 2f       	mov	r30, r24
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	ff 87       	std	Y+15, r31	; 0x0f
    1bb0:	ee 87       	std	Y+14, r30	; 0x0e
    1bb2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bb4:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bb6:	21 30       	cpi	r18, 0x01	; 1
    1bb8:	31 05       	cpc	r19, r1
    1bba:	11 f1       	breq	.+68     	; 0x1c00 <H_SevenSegment_Write_Anode+0xb8>
    1bbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bc0:	82 30       	cpi	r24, 0x02	; 2
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <H_SevenSegment_Write_Anode+0x88>
    1bc6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bc8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bca:	30 97       	sbiw	r30, 0x00	; 0
    1bcc:	61 f0       	breq	.+24     	; 0x1be6 <H_SevenSegment_Write_Anode+0x9e>
    1bce:	3e c0       	rjmp	.+124    	; 0x1c4c <H_SevenSegment_Write_Anode+0x104>
    1bd0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bd2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	01 f1       	breq	.+64     	; 0x1c1a <H_SevenSegment_Write_Anode+0xd2>
    1bda:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	41 f1       	breq	.+80     	; 0x1c34 <H_SevenSegment_Write_Anode+0xec>
    1be4:	33 c0       	rjmp	.+102    	; 0x1c4c <H_SevenSegment_Write_Anode+0x104>
	case PORT_A:M_DIO_SetPortValue(portName,*(arrAnode+data)); break;
    1be6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	fe 01       	movw	r30, r28
    1bee:	32 96       	adiw	r30, 0x02	; 2
    1bf0:	e8 0f       	add	r30, r24
    1bf2:	f9 1f       	adc	r31, r25
    1bf4:	90 81       	ld	r25, Z
    1bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf8:	69 2f       	mov	r22, r25
    1bfa:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
    1bfe:	26 c0       	rjmp	.+76     	; 0x1c4c <H_SevenSegment_Write_Anode+0x104>
	case PORT_B:M_DIO_SetPortValue(portName,*(arrAnode+data)); break;
    1c00:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	fe 01       	movw	r30, r28
    1c08:	32 96       	adiw	r30, 0x02	; 2
    1c0a:	e8 0f       	add	r30, r24
    1c0c:	f9 1f       	adc	r31, r25
    1c0e:	90 81       	ld	r25, Z
    1c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c12:	69 2f       	mov	r22, r25
    1c14:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
    1c18:	19 c0       	rjmp	.+50     	; 0x1c4c <H_SevenSegment_Write_Anode+0x104>
	case PORT_C:M_DIO_SetPortValue(portName,*(arrAnode+data)); break;
    1c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	fe 01       	movw	r30, r28
    1c22:	32 96       	adiw	r30, 0x02	; 2
    1c24:	e8 0f       	add	r30, r24
    1c26:	f9 1f       	adc	r31, r25
    1c28:	90 81       	ld	r25, Z
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	69 2f       	mov	r22, r25
    1c2e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
    1c32:	0c c0       	rjmp	.+24     	; 0x1c4c <H_SevenSegment_Write_Anode+0x104>
	case PORT_D:M_DIO_SetPortValue(portName,*(arrAnode+data)); break;
    1c34:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	32 96       	adiw	r30, 0x02	; 2
    1c3e:	e8 0f       	add	r30, r24
    1c40:	f9 1f       	adc	r31, r25
    1c42:	90 81       	ld	r25, Z
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	69 2f       	mov	r22, r25
    1c48:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <M_DIO_SetPortValue>
	retVal=OK;
	}
	return retVal;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4e:	64 96       	adiw	r28, 0x14	; 20
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <H_SevenSegment_BCD_Init_HighNibble>:

ERROR_STATE_T H_SevenSegment_BCD_Init_HighNibble(u8 portName){
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <H_SevenSegment_BCD_Init_HighNibble+0x6>
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <H_SevenSegment_BCD_Init_HighNibble+0x8>
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_T retVal=NOK;
    1c6e:	19 82       	std	Y+1, r1	; 0x01
		switch(portName){
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3c 83       	std	Y+4, r19	; 0x04
    1c78:	2b 83       	std	Y+3, r18	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	59 f1       	breq	.+86     	; 0x1cda <H_SevenSegment_BCD_Init_HighNibble+0x7a>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <H_SevenSegment_BCD_Init_HighNibble+0x38>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f0       	breq	.+26     	; 0x1cb0 <H_SevenSegment_BCD_Init_HighNibble+0x50>
    1c96:	5f c0       	rjmp	.+190    	; 0x1d56 <H_SevenSegment_BCD_Init_HighNibble+0xf6>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	89 f1       	breq	.+98     	; 0x1d04 <H_SevenSegment_BCD_Init_HighNibble+0xa4>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <H_SevenSegment_BCD_Init_HighNibble+0x4e>
    1cac:	40 c0       	rjmp	.+128    	; 0x1d2e <H_SevenSegment_BCD_Init_HighNibble+0xce>
    1cae:	53 c0       	rjmp	.+166    	; 0x1d56 <H_SevenSegment_BCD_Init_HighNibble+0xf6>
		case PORT_A:
		M_DIO_SetPinDirection(PORT_A,PIN4,OUTPUT);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	64 e0       	ldi	r22, 0x04	; 4
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_A,PIN5,OUTPUT);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	65 e0       	ldi	r22, 0x05	; 5
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_A,PIN6,OUTPUT);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	66 e0       	ldi	r22, 0x06	; 6
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_A,PIN7,OUTPUT); break;
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	67 e0       	ldi	r22, 0x07	; 7
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    1cd8:	3e c0       	rjmp	.+124    	; 0x1d56 <H_SevenSegment_BCD_Init_HighNibble+0xf6>
		case PORT_B:
		M_DIO_SetPinDirection(PORT_B,PIN4,OUTPUT);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	64 e0       	ldi	r22, 0x04	; 4
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_B,PIN5,OUTPUT);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	65 e0       	ldi	r22, 0x05	; 5
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_B,PIN6,OUTPUT);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	66 e0       	ldi	r22, 0x06	; 6
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_B,PIN7,OUTPUT); break;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	67 e0       	ldi	r22, 0x07	; 7
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    1d02:	29 c0       	rjmp	.+82     	; 0x1d56 <H_SevenSegment_BCD_Init_HighNibble+0xf6>

		case PORT_C:
		M_DIO_SetPinDirection(PORT_C,PIN4,OUTPUT);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	64 e0       	ldi	r22, 0x04	; 4
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_C,PIN5,OUTPUT);
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	65 e0       	ldi	r22, 0x05	; 5
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_C,PIN6,OUTPUT);
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	66 e0       	ldi	r22, 0x06	; 6
    1d1c:	41 e0       	ldi	r20, 0x01	; 1
    1d1e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_C,PIN7,OUTPUT); break;
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	67 e0       	ldi	r22, 0x07	; 7
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <H_SevenSegment_BCD_Init_HighNibble+0xf6>

		case PORT_D:
		M_DIO_SetPinDirection(PORT_D,PIN4,OUTPUT);
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	64 e0       	ldi	r22, 0x04	; 4
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_D,PIN5,OUTPUT);
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	65 e0       	ldi	r22, 0x05	; 5
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_D,PIN6,OUTPUT);
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	66 e0       	ldi	r22, 0x06	; 6
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_D,PIN7,OUTPUT); break;
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
    1d4e:	67 e0       	ldi	r22, 0x07	; 7
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		retVal=OK;
		}
		return retVal;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <H_SevenSegment_BCD_Init_LowNibble>:
ERROR_STATE_T H_SevenSegment_BCD_Init_LowNibble(u8 portName){
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <H_SevenSegment_BCD_Init_LowNibble+0x6>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <H_SevenSegment_BCD_Init_LowNibble+0x8>
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_T retVal=NOK;
    1d74:	19 82       	std	Y+1, r1	; 0x01
		switch(portName){
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3c 83       	std	Y+4, r19	; 0x04
    1d7e:	2b 83       	std	Y+3, r18	; 0x03
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	91 05       	cpc	r25, r1
    1d88:	59 f1       	breq	.+86     	; 0x1de0 <H_SevenSegment_BCD_Init_LowNibble+0x7a>
    1d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8e:	22 30       	cpi	r18, 0x02	; 2
    1d90:	31 05       	cpc	r19, r1
    1d92:	2c f4       	brge	.+10     	; 0x1d9e <H_SevenSegment_BCD_Init_LowNibble+0x38>
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f0       	breq	.+26     	; 0x1db6 <H_SevenSegment_BCD_Init_LowNibble+0x50>
    1d9c:	5f c0       	rjmp	.+190    	; 0x1e5c <H_SevenSegment_BCD_Init_LowNibble+0xf6>
    1d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1da0:	3c 81       	ldd	r19, Y+4	; 0x04
    1da2:	22 30       	cpi	r18, 0x02	; 2
    1da4:	31 05       	cpc	r19, r1
    1da6:	89 f1       	breq	.+98     	; 0x1e0a <H_SevenSegment_BCD_Init_LowNibble+0xa4>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	83 30       	cpi	r24, 0x03	; 3
    1dae:	91 05       	cpc	r25, r1
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <H_SevenSegment_BCD_Init_LowNibble+0x4e>
    1db2:	40 c0       	rjmp	.+128    	; 0x1e34 <H_SevenSegment_BCD_Init_LowNibble+0xce>
    1db4:	53 c0       	rjmp	.+166    	; 0x1e5c <H_SevenSegment_BCD_Init_LowNibble+0xf6>
		case PORT_A:
		M_DIO_SetPinDirection(PORT_A,PIN0,OUTPUT);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_A,PIN1,OUTPUT);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_A,PIN2,OUTPUT);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_A,PIN3,OUTPUT); break;
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	63 e0       	ldi	r22, 0x03	; 3
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    1dde:	3e c0       	rjmp	.+124    	; 0x1e5c <H_SevenSegment_BCD_Init_LowNibble+0xf6>
		case PORT_B:
		M_DIO_SetPinDirection(PORT_B,PIN0,OUTPUT);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_B,PIN1,OUTPUT);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_B,PIN2,OUTPUT);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	62 e0       	ldi	r22, 0x02	; 2
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_B,PIN3,OUTPUT); break;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    1e08:	29 c0       	rjmp	.+82     	; 0x1e5c <H_SevenSegment_BCD_Init_LowNibble+0xf6>

		case PORT_C:
		M_DIO_SetPinDirection(PORT_C,PIN0,OUTPUT);
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_C,PIN1,OUTPUT);
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_C,PIN2,OUTPUT);
    1e1e:	82 e0       	ldi	r24, 0x02	; 2
    1e20:	62 e0       	ldi	r22, 0x02	; 2
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_C,PIN3,OUTPUT); break;
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	63 e0       	ldi	r22, 0x03	; 3
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <H_SevenSegment_BCD_Init_LowNibble+0xf6>

		case PORT_D:
		M_DIO_SetPinDirection(PORT_D,PIN0,OUTPUT);
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_D,PIN1,OUTPUT);
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_D,PIN2,OUTPUT);
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		M_DIO_SetPinDirection(PORT_D,PIN3,OUTPUT); break;
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	63 e0       	ldi	r22, 0x03	; 3
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
		retVal=OK;
		}
		return retVal;
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <H_SevenSegment_BCD_HighNibble_Write>:

ERROR_STATE_T H_SevenSegment_BCD_HighNibble_Write(u8 portName,u8 data){
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <H_SevenSegment_BCD_HighNibble_Write+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <H_SevenSegment_BCD_HighNibble_Write+0x8>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATE_T retVal=NOK;
    1e7e:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3d 83       	std	Y+5, r19	; 0x05
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	91 05       	cpc	r25, r1
    1e92:	d1 f0       	breq	.+52     	; 0x1ec8 <H_SevenSegment_BCD_HighNibble_Write+0x5c>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <H_SevenSegment_BCD_HighNibble_Write+0x3c>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	61 f0       	breq	.+24     	; 0x1ebe <H_SevenSegment_BCD_HighNibble_Write+0x52>
    1ea6:	1e c0       	rjmp	.+60     	; 0x1ee4 <H_SevenSegment_BCD_HighNibble_Write+0x78>
    1ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	81 f0       	breq	.+32     	; 0x1ed2 <H_SevenSegment_BCD_HighNibble_Write+0x66>
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	91 05       	cpc	r25, r1
    1eba:	81 f0       	breq	.+32     	; 0x1edc <H_SevenSegment_BCD_HighNibble_Write+0x70>
    1ebc:	13 c0       	rjmp	.+38     	; 0x1ee4 <H_SevenSegment_BCD_HighNibble_Write+0x78>
	case PORT_A:M_DIO_WriteHighNibble(portName,data); break;
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ec2:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <H_SevenSegment_BCD_HighNibble_Write+0x78>
	case PORT_B:M_DIO_WriteHighNibble(portName,data); break;
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	6b 81       	ldd	r22, Y+3	; 0x03
    1ecc:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
    1ed0:	09 c0       	rjmp	.+18     	; 0x1ee4 <H_SevenSegment_BCD_HighNibble_Write+0x78>
	case PORT_C:M_DIO_WriteHighNibble(portName,data); break;
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	6b 81       	ldd	r22, Y+3	; 0x03
    1ed6:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <H_SevenSegment_BCD_HighNibble_Write+0x78>
	case PORT_D:M_DIO_WriteHighNibble(portName,data); break;
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	6b 81       	ldd	r22, Y+3	; 0x03
    1ee0:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
	retVal=OK;
	}
	return retVal;
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <H_SevenSegment_BCD_LowNibble_Write>:
ERROR_STATE_T H_SevenSegment_BCD_LowNibble_Write(u8 portName,u8 data){
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <H_SevenSegment_BCD_LowNibble_Write+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <H_SevenSegment_BCD_LowNibble_Write+0x8>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATE_T retVal=NOK;
    1f08:	19 82       	std	Y+1, r1	; 0x01
	switch(portName){
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3d 83       	std	Y+5, r19	; 0x05
    1f12:	2c 83       	std	Y+4, r18	; 0x04
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	d1 f0       	breq	.+52     	; 0x1f52 <H_SevenSegment_BCD_LowNibble_Write+0x5c>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <H_SevenSegment_BCD_LowNibble_Write+0x3c>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <H_SevenSegment_BCD_LowNibble_Write+0x52>
    1f30:	1e c0       	rjmp	.+60     	; 0x1f6e <H_SevenSegment_BCD_LowNibble_Write+0x78>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	81 f0       	breq	.+32     	; 0x1f5c <H_SevenSegment_BCD_LowNibble_Write+0x66>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	81 f0       	breq	.+32     	; 0x1f66 <H_SevenSegment_BCD_LowNibble_Write+0x70>
    1f46:	13 c0       	rjmp	.+38     	; 0x1f6e <H_SevenSegment_BCD_LowNibble_Write+0x78>
	case PORT_A:M_DIO_WriteLowNibble(portName,data); break;
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	6b 81       	ldd	r22, Y+3	; 0x03
    1f4c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <M_DIO_WriteLowNibble>
    1f50:	0e c0       	rjmp	.+28     	; 0x1f6e <H_SevenSegment_BCD_LowNibble_Write+0x78>
	case PORT_B:M_DIO_WriteLowNibble(portName,data); break;
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	6b 81       	ldd	r22, Y+3	; 0x03
    1f56:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <M_DIO_WriteLowNibble>
    1f5a:	09 c0       	rjmp	.+18     	; 0x1f6e <H_SevenSegment_BCD_LowNibble_Write+0x78>
	case PORT_C:M_DIO_WriteLowNibble(portName,data); break;
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	6b 81       	ldd	r22, Y+3	; 0x03
    1f60:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <M_DIO_WriteLowNibble>
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <H_SevenSegment_BCD_LowNibble_Write+0x78>
	case PORT_D:M_DIO_WriteLowNibble(portName,data); break;
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	6b 81       	ldd	r22, Y+3	; 0x03
    1f6a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <M_DIO_WriteLowNibble>
	retVal=OK;
	}
	return retVal;
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <H_LCD_Init>:
 */
#include <stdio.h>
#include "../H_LCD_Driver/H_LCD.h"
#include "../H_LCD_Driver/H_LCD_CFG.h"

void H_LCD_Init(){
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	c6 54       	subi	r28, 0x46	; 70
    1f8e:	d0 40       	sbci	r29, 0x00	; 0
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	H_LCD_sendCommand(CLEAR_DISPLAY);
	_delay_ms(2);
	//4.send entry mood
	H_LCD_sendCommand(ENTRY_MODE);
#elif defined FOUR_PINS_MODE
	M_DIO_SetPinDirection(LCD_DATA_PORT, LCD_PIN4, OUTPUT);
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	64 e0       	ldi	r22, 0x04	; 4
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(LCD_DATA_PORT, LCD_PIN5, OUTPUT);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	65 e0       	ldi	r22, 0x05	; 5
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(LCD_DATA_PORT, LCD_PIN6, OUTPUT);
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	66 e0       	ldi	r22, 0x06	; 6
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(LCD_DATA_PORT, LCD_PIN7, OUTPUT);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	67 e0       	ldi	r22, 0x07	; 7
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	H_LCD_sendCommand(RETURN_HOME);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ed 5b       	subi	r30, 0xBD	; 189
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 e2       	ldi	r26, 0x20	; 32
    1fe8:	b1 e4       	ldi	r27, 0x41	; 65
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	8e 01       	movw	r16, r28
    1ff4:	01 5c       	subi	r16, 0xC1	; 193
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ed 5b       	subi	r30, 0xBD	; 189
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	f8 01       	movw	r30, r16
    2018:	80 83       	st	Z, r24
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	a2 83       	std	Z+2, r26	; 0x02
    201e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2020:	fe 01       	movw	r30, r28
    2022:	ff 96       	adiw	r30, 0x3f	; 63
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	2c f4       	brge	.+10     	; 0x2046 <H_LCD_Init+0xc6>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9e af       	std	Y+62, r25	; 0x3e
    2042:	8d af       	std	Y+61, r24	; 0x3d
    2044:	46 c0       	rjmp	.+140    	; 0x20d2 <H_LCD_Init+0x152>
	else if (__tmp > 65535)
    2046:	fe 01       	movw	r30, r28
    2048:	ff 96       	adiw	r30, 0x3f	; 63
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	64 f5       	brge	.+88     	; 0x20ba <H_LCD_Init+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	fe 01       	movw	r30, r28
    2064:	ed 5b       	subi	r30, 0xBD	; 189
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e af       	std	Y+62, r25	; 0x3e
    208e:	8d af       	std	Y+61, r24	; 0x3d
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <H_LCD_Init+0x130>
    2092:	89 e1       	ldi	r24, 0x19	; 25
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c af       	std	Y+60, r25	; 0x3c
    2098:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    209a:	8b ad       	ldd	r24, Y+59	; 0x3b
    209c:	9c ad       	ldd	r25, Y+60	; 0x3c
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <H_LCD_Init+0x11e>
    20a2:	9c af       	std	Y+60, r25	; 0x3c
    20a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	9e af       	std	Y+62, r25	; 0x3e
    20ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <H_LCD_Init+0x112>
    20b8:	16 c0       	rjmp	.+44     	; 0x20e6 <H_LCD_Init+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	fe 01       	movw	r30, r28
    20bc:	ff 96       	adiw	r30, 0x3f	; 63
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e af       	std	Y+62, r25	; 0x3e
    20d0:	8d af       	std	Y+61, r24	; 0x3d
    20d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20d6:	9a af       	std	Y+58, r25	; 0x3a
    20d8:	89 af       	std	Y+57, r24	; 0x39
    20da:	89 ad       	ldd	r24, Y+57	; 0x39
    20dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <H_LCD_Init+0x15e>
    20e2:	9a af       	std	Y+58, r25	; 0x3a
    20e4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	H_LCD_sendCommand(FUNCTION_SET);
    20e6:	88 e2       	ldi	r24, 0x28	; 40
    20e8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a0 e8       	ldi	r26, 0x80	; 128
    20f2:	bf e3       	ldi	r27, 0x3F	; 63
    20f4:	8d ab       	std	Y+53, r24	; 0x35
    20f6:	9e ab       	std	Y+54, r25	; 0x36
    20f8:	af ab       	std	Y+55, r26	; 0x37
    20fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	6d a9       	ldd	r22, Y+53	; 0x35
    20fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2100:	8f a9       	ldd	r24, Y+55	; 0x37
    2102:	98 ad       	ldd	r25, Y+56	; 0x38
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a e7       	ldi	r20, 0x7A	; 122
    210a:	53 e4       	ldi	r21, 0x43	; 67
    210c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	89 ab       	std	Y+49, r24	; 0x31
    2116:	9a ab       	std	Y+50, r25	; 0x32
    2118:	ab ab       	std	Y+51, r26	; 0x33
    211a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    211c:	69 a9       	ldd	r22, Y+49	; 0x31
    211e:	7a a9       	ldd	r23, Y+50	; 0x32
    2120:	8b a9       	ldd	r24, Y+51	; 0x33
    2122:	9c a9       	ldd	r25, Y+52	; 0x34
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <H_LCD_Init+0x1be>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	98 ab       	std	Y+48, r25	; 0x30
    213a:	8f a7       	std	Y+47, r24	; 0x2f
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <H_LCD_Init+0x23c>
	else if (__tmp > 65535)
    213e:	69 a9       	ldd	r22, Y+49	; 0x31
    2140:	7a a9       	ldd	r23, Y+50	; 0x32
    2142:	8b a9       	ldd	r24, Y+51	; 0x33
    2144:	9c a9       	ldd	r25, Y+52	; 0x34
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <H_LCD_Init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	6d a9       	ldd	r22, Y+53	; 0x35
    2158:	7e a9       	ldd	r23, Y+54	; 0x36
    215a:	8f a9       	ldd	r24, Y+55	; 0x37
    215c:	98 ad       	ldd	r25, Y+56	; 0x38
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	98 ab       	std	Y+48, r25	; 0x30
    217c:	8f a7       	std	Y+47, r24	; 0x2f
    217e:	0f c0       	rjmp	.+30     	; 0x219e <H_LCD_Init+0x21e>
    2180:	89 e1       	ldi	r24, 0x19	; 25
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9e a7       	std	Y+46, r25	; 0x2e
    2186:	8d a7       	std	Y+45, r24	; 0x2d
    2188:	8d a5       	ldd	r24, Y+45	; 0x2d
    218a:	9e a5       	ldd	r25, Y+46	; 0x2e
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <H_LCD_Init+0x20c>
    2190:	9e a7       	std	Y+46, r25	; 0x2e
    2192:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	8f a5       	ldd	r24, Y+47	; 0x2f
    2196:	98 a9       	ldd	r25, Y+48	; 0x30
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	98 ab       	std	Y+48, r25	; 0x30
    219c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a0:	98 a9       	ldd	r25, Y+48	; 0x30
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	69 f7       	brne	.-38     	; 0x2180 <H_LCD_Init+0x200>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <H_LCD_Init+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	69 a9       	ldd	r22, Y+49	; 0x31
    21aa:	7a a9       	ldd	r23, Y+50	; 0x32
    21ac:	8b a9       	ldd	r24, Y+51	; 0x33
    21ae:	9c a9       	ldd	r25, Y+52	; 0x34
    21b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	98 ab       	std	Y+48, r25	; 0x30
    21ba:	8f a7       	std	Y+47, r24	; 0x2f
    21bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    21be:	98 a9       	ldd	r25, Y+48	; 0x30
    21c0:	9c a7       	std	Y+44, r25	; 0x2c
    21c2:	8b a7       	std	Y+43, r24	; 0x2b
    21c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <H_LCD_Init+0x248>
    21cc:	9c a7       	std	Y+44, r25	; 0x2c
    21ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	H_LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    21d0:	8c e0       	ldi	r24, 0x0C	; 12
    21d2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e4       	ldi	r27, 0x40	; 64
    21de:	8f a3       	std	Y+39, r24	; 0x27
    21e0:	98 a7       	std	Y+40, r25	; 0x28
    21e2:	a9 a7       	std	Y+41, r26	; 0x29
    21e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6f a1       	ldd	r22, Y+39	; 0x27
    21e8:	78 a5       	ldd	r23, Y+40	; 0x28
    21ea:	89 a5       	ldd	r24, Y+41	; 0x29
    21ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a e7       	ldi	r20, 0x7A	; 122
    21f4:	53 e4       	ldi	r21, 0x43	; 67
    21f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8b a3       	std	Y+35, r24	; 0x23
    2200:	9c a3       	std	Y+36, r25	; 0x24
    2202:	ad a3       	std	Y+37, r26	; 0x25
    2204:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <H_LCD_Init+0x2a8>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9a a3       	std	Y+34, r25	; 0x22
    2224:	89 a3       	std	Y+33, r24	; 0x21
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <H_LCD_Init+0x326>
	else if (__tmp > 65535)
    2228:	6b a1       	ldd	r22, Y+35	; 0x23
    222a:	7c a1       	ldd	r23, Y+36	; 0x24
    222c:	8d a1       	ldd	r24, Y+37	; 0x25
    222e:	9e a1       	ldd	r25, Y+38	; 0x26
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <H_LCD_Init+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6f a1       	ldd	r22, Y+39	; 0x27
    2242:	78 a5       	ldd	r23, Y+40	; 0x28
    2244:	89 a5       	ldd	r24, Y+41	; 0x29
    2246:	9a a5       	ldd	r25, Y+42	; 0x2a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9a a3       	std	Y+34, r25	; 0x22
    2266:	89 a3       	std	Y+33, r24	; 0x21
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <H_LCD_Init+0x308>
    226a:	89 e1       	ldi	r24, 0x19	; 25
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	98 a3       	std	Y+32, r25	; 0x20
    2270:	8f 8f       	std	Y+31, r24	; 0x1f
    2272:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2274:	98 a1       	ldd	r25, Y+32	; 0x20
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <H_LCD_Init+0x2f6>
    227a:	98 a3       	std	Y+32, r25	; 0x20
    227c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	89 a1       	ldd	r24, Y+33	; 0x21
    2280:	9a a1       	ldd	r25, Y+34	; 0x22
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9a a3       	std	Y+34, r25	; 0x22
    2286:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	89 a1       	ldd	r24, Y+33	; 0x21
    228a:	9a a1       	ldd	r25, Y+34	; 0x22
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <H_LCD_Init+0x2ea>
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <H_LCD_Init+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	6b a1       	ldd	r22, Y+35	; 0x23
    2294:	7c a1       	ldd	r23, Y+36	; 0x24
    2296:	8d a1       	ldd	r24, Y+37	; 0x25
    2298:	9e a1       	ldd	r25, Y+38	; 0x26
    229a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	9e 8f       	std	Y+30, r25	; 0x1e
    22ac:	8d 8f       	std	Y+29, r24	; 0x1d
    22ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <H_LCD_Init+0x332>
    22b6:	9e 8f       	std	Y+30, r25	; 0x1e
    22b8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);
    H_LCD_sendCommand(CLEAR_DISPLAY);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b0 e4       	ldi	r27, 0x40	; 64
    22c8:	89 8f       	std	Y+25, r24	; 0x19
    22ca:	9a 8f       	std	Y+26, r25	; 0x1a
    22cc:	ab 8f       	std	Y+27, r26	; 0x1b
    22ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	69 8d       	ldd	r22, Y+25	; 0x19
    22d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	53 e4       	ldi	r21, 0x43	; 67
    22e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8d 8b       	std	Y+21, r24	; 0x15
    22ea:	9e 8b       	std	Y+22, r25	; 0x16
    22ec:	af 8b       	std	Y+23, r26	; 0x17
    22ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f0:	6d 89       	ldd	r22, Y+21	; 0x15
    22f2:	7e 89       	ldd	r23, Y+22	; 0x16
    22f4:	8f 89       	ldd	r24, Y+23	; 0x17
    22f6:	98 8d       	ldd	r25, Y+24	; 0x18
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	2c f4       	brge	.+10     	; 0x2312 <H_LCD_Init+0x392>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9c 8b       	std	Y+20, r25	; 0x14
    230e:	8b 8b       	std	Y+19, r24	; 0x13
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <H_LCD_Init+0x410>
	else if (__tmp > 65535)
    2312:	6d 89       	ldd	r22, Y+21	; 0x15
    2314:	7e 89       	ldd	r23, Y+22	; 0x16
    2316:	8f 89       	ldd	r24, Y+23	; 0x17
    2318:	98 8d       	ldd	r25, Y+24	; 0x18
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	4c f5       	brge	.+82     	; 0x237c <H_LCD_Init+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	69 8d       	ldd	r22, Y+25	; 0x19
    232c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9c 8b       	std	Y+20, r25	; 0x14
    2350:	8b 8b       	std	Y+19, r24	; 0x13
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <H_LCD_Init+0x3f2>
    2354:	89 e1       	ldi	r24, 0x19	; 25
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9a 8b       	std	Y+18, r25	; 0x12
    235a:	89 8b       	std	Y+17, r24	; 0x11
    235c:	89 89       	ldd	r24, Y+17	; 0x11
    235e:	9a 89       	ldd	r25, Y+18	; 0x12
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <H_LCD_Init+0x3e0>
    2364:	9a 8b       	std	Y+18, r25	; 0x12
    2366:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	8b 89       	ldd	r24, Y+19	; 0x13
    236a:	9c 89       	ldd	r25, Y+20	; 0x14
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9c 8b       	std	Y+20, r25	; 0x14
    2370:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	69 f7       	brne	.-38     	; 0x2354 <H_LCD_Init+0x3d4>
    237a:	14 c0       	rjmp	.+40     	; 0x23a4 <H_LCD_Init+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9c 8b       	std	Y+20, r25	; 0x14
    238e:	8b 8b       	std	Y+19, r24	; 0x13
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	98 8b       	std	Y+16, r25	; 0x10
    2396:	8f 87       	std	Y+15, r24	; 0x0f
    2398:	8f 85       	ldd	r24, Y+15	; 0x0f
    239a:	98 89       	ldd	r25, Y+16	; 0x10
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <H_LCD_Init+0x41c>
    23a0:	98 8b       	std	Y+16, r25	; 0x10
    23a2:	8f 87       	std	Y+15, r24	; 0x0f
    	_delay_ms(2);
    	//4.send entry mood
    	H_LCD_sendCommand(ENTRY_MODE);
    23a4:	86 e0       	ldi	r24, 0x06	; 6
    23a6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e0       	ldi	r26, 0x00	; 0
    23b0:	b0 e4       	ldi	r27, 0x40	; 64
    23b2:	8b 87       	std	Y+11, r24	; 0x0b
    23b4:	9c 87       	std	Y+12, r25	; 0x0c
    23b6:	ad 87       	std	Y+13, r26	; 0x0d
    23b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    23bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23be:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a e7       	ldi	r20, 0x7A	; 122
    23c8:	53 e4       	ldi	r21, 0x43	; 67
    23ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8f 83       	std	Y+7, r24	; 0x07
    23d4:	98 87       	std	Y+8, r25	; 0x08
    23d6:	a9 87       	std	Y+9, r26	; 0x09
    23d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <H_LCD_Init+0x47c>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <H_LCD_Init+0x4fa>
	else if (__tmp > 65535)
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <H_LCD_Init+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	6b 85       	ldd	r22, Y+11	; 0x0b
    2416:	7c 85       	ldd	r23, Y+12	; 0x0c
    2418:	8d 85       	ldd	r24, Y+13	; 0x0d
    241a:	9e 85       	ldd	r25, Y+14	; 0x0e
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	0f c0       	rjmp	.+30     	; 0x245c <H_LCD_Init+0x4dc>
    243e:	89 e1       	ldi	r24, 0x19	; 25
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <H_LCD_Init+0x4ca>
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <H_LCD_Init+0x4be>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <H_LCD_Init+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <H_LCD_Init+0x506>
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(2);
#endif

}
    248e:	ca 5b       	subi	r28, 0xBA	; 186
    2490:	df 4f       	sbci	r29, 0xFF	; 255
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	08 95       	ret

000024a6 <H_LCD_sendData>:
void H_LCD_sendData(u8 data){
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	ab 97       	sbiw	r28, 0x2b	; 43
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	8b a7       	std	Y+43, r24	; 0x2b
	//3.send enable pulse
	M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
	_delay_ms(10);
	M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
#elif defined FOUR_PINS_MODE
		M_DIO_WriteHighNibble(LCD_DATA_PORT,data>>4);
    24bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24be:	98 2f       	mov	r25, r24
    24c0:	92 95       	swap	r25
    24c2:	9f 70       	andi	r25, 0x0F	; 15
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	69 2f       	mov	r22, r25
    24c8:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
		M_DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>

		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e2       	ldi	r26, 0x20	; 32
    24e6:	b1 e4       	ldi	r27, 0x41	; 65
    24e8:	8f a3       	std	Y+39, r24	; 0x27
    24ea:	98 a7       	std	Y+40, r25	; 0x28
    24ec:	a9 a7       	std	Y+41, r26	; 0x29
    24ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	6f a1       	ldd	r22, Y+39	; 0x27
    24f2:	78 a5       	ldd	r23, Y+40	; 0x28
    24f4:	89 a5       	ldd	r24, Y+41	; 0x29
    24f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a e7       	ldi	r20, 0x7A	; 122
    24fe:	53 e4       	ldi	r21, 0x43	; 67
    2500:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	8b a3       	std	Y+35, r24	; 0x23
    250a:	9c a3       	std	Y+36, r25	; 0x24
    250c:	ad a3       	std	Y+37, r26	; 0x25
    250e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2510:	6b a1       	ldd	r22, Y+35	; 0x23
    2512:	7c a1       	ldd	r23, Y+36	; 0x24
    2514:	8d a1       	ldd	r24, Y+37	; 0x25
    2516:	9e a1       	ldd	r25, Y+38	; 0x26
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	2c f4       	brge	.+10     	; 0x2532 <H_LCD_sendData+0x8c>
		__ticks = 1;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9a a3       	std	Y+34, r25	; 0x22
    252e:	89 a3       	std	Y+33, r24	; 0x21
    2530:	3f c0       	rjmp	.+126    	; 0x25b0 <H_LCD_sendData+0x10a>
	else if (__tmp > 65535)
    2532:	6b a1       	ldd	r22, Y+35	; 0x23
    2534:	7c a1       	ldd	r23, Y+36	; 0x24
    2536:	8d a1       	ldd	r24, Y+37	; 0x25
    2538:	9e a1       	ldd	r25, Y+38	; 0x26
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	4f e7       	ldi	r20, 0x7F	; 127
    2540:	57 e4       	ldi	r21, 0x47	; 71
    2542:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2546:	18 16       	cp	r1, r24
    2548:	4c f5       	brge	.+82     	; 0x259c <H_LCD_sendData+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254a:	6f a1       	ldd	r22, Y+39	; 0x27
    254c:	78 a5       	ldd	r23, Y+40	; 0x28
    254e:	89 a5       	ldd	r24, Y+41	; 0x29
    2550:	9a a5       	ldd	r25, Y+42	; 0x2a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e2       	ldi	r20, 0x20	; 32
    2558:	51 e4       	ldi	r21, 0x41	; 65
    255a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9a a3       	std	Y+34, r25	; 0x22
    2570:	89 a3       	std	Y+33, r24	; 0x21
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <H_LCD_sendData+0xec>
    2574:	89 e1       	ldi	r24, 0x19	; 25
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	98 a3       	std	Y+32, r25	; 0x20
    257a:	8f 8f       	std	Y+31, r24	; 0x1f
    257c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    257e:	98 a1       	ldd	r25, Y+32	; 0x20
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <H_LCD_sendData+0xda>
    2584:	98 a3       	std	Y+32, r25	; 0x20
    2586:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2588:	89 a1       	ldd	r24, Y+33	; 0x21
    258a:	9a a1       	ldd	r25, Y+34	; 0x22
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	9a a3       	std	Y+34, r25	; 0x22
    2590:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	89 a1       	ldd	r24, Y+33	; 0x21
    2594:	9a a1       	ldd	r25, Y+34	; 0x22
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	69 f7       	brne	.-38     	; 0x2574 <H_LCD_sendData+0xce>
    259a:	14 c0       	rjmp	.+40     	; 0x25c4 <H_LCD_sendData+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259c:	6b a1       	ldd	r22, Y+35	; 0x23
    259e:	7c a1       	ldd	r23, Y+36	; 0x24
    25a0:	8d a1       	ldd	r24, Y+37	; 0x25
    25a2:	9e a1       	ldd	r25, Y+38	; 0x26
    25a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9a a3       	std	Y+34, r25	; 0x22
    25ae:	89 a3       	std	Y+33, r24	; 0x21
    25b0:	89 a1       	ldd	r24, Y+33	; 0x21
    25b2:	9a a1       	ldd	r25, Y+34	; 0x22
    25b4:	9e 8f       	std	Y+30, r25	; 0x1e
    25b6:	8d 8f       	std	Y+29, r24	; 0x1d
    25b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <H_LCD_sendData+0x116>
    25c0:	9e 8f       	std	Y+30, r25	; 0x1e
    25c2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>

		M_DIO_WriteHighNibble(LCD_DATA_PORT,data);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	6b a5       	ldd	r22, Y+43	; 0x2b
    25d2:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
		M_DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e2       	ldi	r26, 0x20	; 32
    25f0:	b1 e4       	ldi	r27, 0x41	; 65
    25f2:	89 8f       	std	Y+25, r24	; 0x19
    25f4:	9a 8f       	std	Y+26, r25	; 0x1a
    25f6:	ab 8f       	std	Y+27, r26	; 0x1b
    25f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	69 8d       	ldd	r22, Y+25	; 0x19
    25fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a e7       	ldi	r20, 0x7A	; 122
    2608:	53 e4       	ldi	r21, 0x43	; 67
    260a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8d 8b       	std	Y+21, r24	; 0x15
    2614:	9e 8b       	std	Y+22, r25	; 0x16
    2616:	af 8b       	std	Y+23, r26	; 0x17
    2618:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    261a:	6d 89       	ldd	r22, Y+21	; 0x15
    261c:	7e 89       	ldd	r23, Y+22	; 0x16
    261e:	8f 89       	ldd	r24, Y+23	; 0x17
    2620:	98 8d       	ldd	r25, Y+24	; 0x18
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5f e3       	ldi	r21, 0x3F	; 63
    262a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    262e:	88 23       	and	r24, r24
    2630:	2c f4       	brge	.+10     	; 0x263c <H_LCD_sendData+0x196>
		__ticks = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9c 8b       	std	Y+20, r25	; 0x14
    2638:	8b 8b       	std	Y+19, r24	; 0x13
    263a:	3f c0       	rjmp	.+126    	; 0x26ba <H_LCD_sendData+0x214>
	else if (__tmp > 65535)
    263c:	6d 89       	ldd	r22, Y+21	; 0x15
    263e:	7e 89       	ldd	r23, Y+22	; 0x16
    2640:	8f 89       	ldd	r24, Y+23	; 0x17
    2642:	98 8d       	ldd	r25, Y+24	; 0x18
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	3f ef       	ldi	r19, 0xFF	; 255
    2648:	4f e7       	ldi	r20, 0x7F	; 127
    264a:	57 e4       	ldi	r21, 0x47	; 71
    264c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2650:	18 16       	cp	r1, r24
    2652:	4c f5       	brge	.+82     	; 0x26a6 <H_LCD_sendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	69 8d       	ldd	r22, Y+25	; 0x19
    2656:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9c 8b       	std	Y+20, r25	; 0x14
    267a:	8b 8b       	std	Y+19, r24	; 0x13
    267c:	0f c0       	rjmp	.+30     	; 0x269c <H_LCD_sendData+0x1f6>
    267e:	89 e1       	ldi	r24, 0x19	; 25
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9a 8b       	std	Y+18, r25	; 0x12
    2684:	89 8b       	std	Y+17, r24	; 0x11
    2686:	89 89       	ldd	r24, Y+17	; 0x11
    2688:	9a 89       	ldd	r25, Y+18	; 0x12
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <H_LCD_sendData+0x1e4>
    268e:	9a 8b       	std	Y+18, r25	; 0x12
    2690:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2692:	8b 89       	ldd	r24, Y+19	; 0x13
    2694:	9c 89       	ldd	r25, Y+20	; 0x14
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9c 8b       	std	Y+20, r25	; 0x14
    269a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269c:	8b 89       	ldd	r24, Y+19	; 0x13
    269e:	9c 89       	ldd	r25, Y+20	; 0x14
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	69 f7       	brne	.-38     	; 0x267e <H_LCD_sendData+0x1d8>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <H_LCD_sendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	6d 89       	ldd	r22, Y+21	; 0x15
    26a8:	7e 89       	ldd	r23, Y+22	; 0x16
    26aa:	8f 89       	ldd	r24, Y+23	; 0x17
    26ac:	98 8d       	ldd	r25, Y+24	; 0x18
    26ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9c 8b       	std	Y+20, r25	; 0x14
    26b8:	8b 8b       	std	Y+19, r24	; 0x13
    26ba:	8b 89       	ldd	r24, Y+19	; 0x13
    26bc:	9c 89       	ldd	r25, Y+20	; 0x14
    26be:	98 8b       	std	Y+16, r25	; 0x10
    26c0:	8f 87       	std	Y+15, r24	; 0x0f
    26c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c4:	98 89       	ldd	r25, Y+16	; 0x10
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <H_LCD_sendData+0x220>
    26ca:	98 8b       	std	Y+16, r25	; 0x10
    26cc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a0 e8       	ldi	r26, 0x80	; 128
    26de:	bf e3       	ldi	r27, 0x3F	; 63
    26e0:	8b 87       	std	Y+11, r24	; 0x0b
    26e2:	9c 87       	std	Y+12, r25	; 0x0c
    26e4:	ad 87       	std	Y+13, r26	; 0x0d
    26e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a e7       	ldi	r20, 0x7A	; 122
    26f6:	53 e4       	ldi	r21, 0x43	; 67
    26f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8f 83       	std	Y+7, r24	; 0x07
    2702:	98 87       	std	Y+8, r25	; 0x08
    2704:	a9 87       	std	Y+9, r26	; 0x09
    2706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e8       	ldi	r20, 0x80	; 128
    2716:	5f e3       	ldi	r21, 0x3F	; 63
    2718:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    271c:	88 23       	and	r24, r24
    271e:	2c f4       	brge	.+10     	; 0x272a <H_LCD_sendData+0x284>
		__ticks = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	3f c0       	rjmp	.+126    	; 0x27a8 <H_LCD_sendData+0x302>
	else if (__tmp > 65535)
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	4c f5       	brge	.+82     	; 0x2794 <H_LCD_sendData+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2742:	6b 85       	ldd	r22, Y+11	; 0x0b
    2744:	7c 85       	ldd	r23, Y+12	; 0x0c
    2746:	8d 85       	ldd	r24, Y+13	; 0x0d
    2748:	9e 85       	ldd	r25, Y+14	; 0x0e
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e2       	ldi	r20, 0x20	; 32
    2750:	51 e4       	ldi	r21, 0x41	; 65
    2752:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	0f c0       	rjmp	.+30     	; 0x278a <H_LCD_sendData+0x2e4>
    276c:	89 e1       	ldi	r24, 0x19	; 25
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	9c 83       	std	Y+4, r25	; 0x04
    2772:	8b 83       	std	Y+3, r24	; 0x03
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <H_LCD_sendData+0x2d2>
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	69 f7       	brne	.-38     	; 0x276c <H_LCD_sendData+0x2c6>
    2792:	14 c0       	rjmp	.+40     	; 0x27bc <H_LCD_sendData+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2794:	6f 81       	ldd	r22, Y+7	; 0x07
    2796:	78 85       	ldd	r23, Y+8	; 0x08
    2798:	89 85       	ldd	r24, Y+9	; 0x09
    279a:	9a 85       	ldd	r25, Y+10	; 0x0a
    279c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <H_LCD_sendData+0x30e>
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif



}
    27bc:	ab 96       	adiw	r28, 0x2b	; 43
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <H_LCD_sendCommand>:
void H_LCD_sendCommand(u8 command){
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	ab 97       	sbiw	r28, 0x2b	; 43
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	8b a7       	std	Y+43, r24	; 0x2b
		//4.send enable pulse
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
		_delay_ms(10);
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
#elif defined FOUR_PINS_MODE
		M_DIO_WriteHighNibble(LCD_DATA_PORT,command>>4);
    27e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e6:	98 2f       	mov	r25, r24
    27e8:	92 95       	swap	r25
    27ea:	9f 70       	andi	r25, 0x0F	; 15
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	69 2f       	mov	r22, r25
    27f0:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
		M_DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e2       	ldi	r26, 0x20	; 32
    280e:	b1 e4       	ldi	r27, 0x41	; 65
    2810:	8f a3       	std	Y+39, r24	; 0x27
    2812:	98 a7       	std	Y+40, r25	; 0x28
    2814:	a9 a7       	std	Y+41, r26	; 0x29
    2816:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	6f a1       	ldd	r22, Y+39	; 0x27
    281a:	78 a5       	ldd	r23, Y+40	; 0x28
    281c:	89 a5       	ldd	r24, Y+41	; 0x29
    281e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a e7       	ldi	r20, 0x7A	; 122
    2826:	53 e4       	ldi	r21, 0x43	; 67
    2828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8b a3       	std	Y+35, r24	; 0x23
    2832:	9c a3       	std	Y+36, r25	; 0x24
    2834:	ad a3       	std	Y+37, r26	; 0x25
    2836:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2838:	6b a1       	ldd	r22, Y+35	; 0x23
    283a:	7c a1       	ldd	r23, Y+36	; 0x24
    283c:	8d a1       	ldd	r24, Y+37	; 0x25
    283e:	9e a1       	ldd	r25, Y+38	; 0x26
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	2c f4       	brge	.+10     	; 0x285a <H_LCD_sendCommand+0x8c>
		__ticks = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9a a3       	std	Y+34, r25	; 0x22
    2856:	89 a3       	std	Y+33, r24	; 0x21
    2858:	3f c0       	rjmp	.+126    	; 0x28d8 <H_LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
    285a:	6b a1       	ldd	r22, Y+35	; 0x23
    285c:	7c a1       	ldd	r23, Y+36	; 0x24
    285e:	8d a1       	ldd	r24, Y+37	; 0x25
    2860:	9e a1       	ldd	r25, Y+38	; 0x26
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	4c f5       	brge	.+82     	; 0x28c4 <H_LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	6f a1       	ldd	r22, Y+39	; 0x27
    2874:	78 a5       	ldd	r23, Y+40	; 0x28
    2876:	89 a5       	ldd	r24, Y+41	; 0x29
    2878:	9a a5       	ldd	r25, Y+42	; 0x2a
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e2       	ldi	r20, 0x20	; 32
    2880:	51 e4       	ldi	r21, 0x41	; 65
    2882:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9a a3       	std	Y+34, r25	; 0x22
    2898:	89 a3       	std	Y+33, r24	; 0x21
    289a:	0f c0       	rjmp	.+30     	; 0x28ba <H_LCD_sendCommand+0xec>
    289c:	89 e1       	ldi	r24, 0x19	; 25
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	98 a3       	std	Y+32, r25	; 0x20
    28a2:	8f 8f       	std	Y+31, r24	; 0x1f
    28a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a6:	98 a1       	ldd	r25, Y+32	; 0x20
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <H_LCD_sendCommand+0xda>
    28ac:	98 a3       	std	Y+32, r25	; 0x20
    28ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	89 a1       	ldd	r24, Y+33	; 0x21
    28b2:	9a a1       	ldd	r25, Y+34	; 0x22
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ba:	89 a1       	ldd	r24, Y+33	; 0x21
    28bc:	9a a1       	ldd	r25, Y+34	; 0x22
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	69 f7       	brne	.-38     	; 0x289c <H_LCD_sendCommand+0xce>
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <H_LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c4:	6b a1       	ldd	r22, Y+35	; 0x23
    28c6:	7c a1       	ldd	r23, Y+36	; 0x24
    28c8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ca:	9e a1       	ldd	r25, Y+38	; 0x26
    28cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9a a3       	std	Y+34, r25	; 0x22
    28d6:	89 a3       	std	Y+33, r24	; 0x21
    28d8:	89 a1       	ldd	r24, Y+33	; 0x21
    28da:	9a a1       	ldd	r25, Y+34	; 0x22
    28dc:	9e 8f       	std	Y+30, r25	; 0x1e
    28de:	8d 8f       	std	Y+29, r24	; 0x1d
    28e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <H_LCD_sendCommand+0x116>
    28e8:	9e 8f       	std	Y+30, r25	; 0x1e
    28ea:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_WriteHighNibble(LCD_DATA_PORT,command);
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	6b a5       	ldd	r22, Y+43	; 0x2b
    28fa:	0e 94 ed 0b 	call	0x17da	; 0x17da <M_DIO_WriteHighNibble>
		M_DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	61 e0       	ldi	r22, 0x01	; 1
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 e2       	ldi	r26, 0x20	; 32
    2918:	b1 e4       	ldi	r27, 0x41	; 65
    291a:	89 8f       	std	Y+25, r24	; 0x19
    291c:	9a 8f       	std	Y+26, r25	; 0x1a
    291e:	ab 8f       	std	Y+27, r26	; 0x1b
    2920:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2922:	69 8d       	ldd	r22, Y+25	; 0x19
    2924:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2928:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	4a e7       	ldi	r20, 0x7A	; 122
    2930:	53 e4       	ldi	r21, 0x43	; 67
    2932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	8d 8b       	std	Y+21, r24	; 0x15
    293c:	9e 8b       	std	Y+22, r25	; 0x16
    293e:	af 8b       	std	Y+23, r26	; 0x17
    2940:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2942:	6d 89       	ldd	r22, Y+21	; 0x15
    2944:	7e 89       	ldd	r23, Y+22	; 0x16
    2946:	8f 89       	ldd	r24, Y+23	; 0x17
    2948:	98 8d       	ldd	r25, Y+24	; 0x18
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e8       	ldi	r20, 0x80	; 128
    2950:	5f e3       	ldi	r21, 0x3F	; 63
    2952:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2956:	88 23       	and	r24, r24
    2958:	2c f4       	brge	.+10     	; 0x2964 <H_LCD_sendCommand+0x196>
		__ticks = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	9c 8b       	std	Y+20, r25	; 0x14
    2960:	8b 8b       	std	Y+19, r24	; 0x13
    2962:	3f c0       	rjmp	.+126    	; 0x29e2 <H_LCD_sendCommand+0x214>
	else if (__tmp > 65535)
    2964:	6d 89       	ldd	r22, Y+21	; 0x15
    2966:	7e 89       	ldd	r23, Y+22	; 0x16
    2968:	8f 89       	ldd	r24, Y+23	; 0x17
    296a:	98 8d       	ldd	r25, Y+24	; 0x18
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	4c f5       	brge	.+82     	; 0x29ce <H_LCD_sendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297c:	69 8d       	ldd	r22, Y+25	; 0x19
    297e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2980:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2982:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e2       	ldi	r20, 0x20	; 32
    298a:	51 e4       	ldi	r21, 0x41	; 65
    298c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9c 8b       	std	Y+20, r25	; 0x14
    29a2:	8b 8b       	std	Y+19, r24	; 0x13
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <H_LCD_sendCommand+0x1f6>
    29a6:	89 e1       	ldi	r24, 0x19	; 25
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9a 8b       	std	Y+18, r25	; 0x12
    29ac:	89 8b       	std	Y+17, r24	; 0x11
    29ae:	89 89       	ldd	r24, Y+17	; 0x11
    29b0:	9a 89       	ldd	r25, Y+18	; 0x12
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <H_LCD_sendCommand+0x1e4>
    29b6:	9a 8b       	std	Y+18, r25	; 0x12
    29b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	8b 89       	ldd	r24, Y+19	; 0x13
    29bc:	9c 89       	ldd	r25, Y+20	; 0x14
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	9c 8b       	std	Y+20, r25	; 0x14
    29c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c4:	8b 89       	ldd	r24, Y+19	; 0x13
    29c6:	9c 89       	ldd	r25, Y+20	; 0x14
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	69 f7       	brne	.-38     	; 0x29a6 <H_LCD_sendCommand+0x1d8>
    29cc:	14 c0       	rjmp	.+40     	; 0x29f6 <H_LCD_sendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ce:	6d 89       	ldd	r22, Y+21	; 0x15
    29d0:	7e 89       	ldd	r23, Y+22	; 0x16
    29d2:	8f 89       	ldd	r24, Y+23	; 0x17
    29d4:	98 8d       	ldd	r25, Y+24	; 0x18
    29d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9c 8b       	std	Y+20, r25	; 0x14
    29e0:	8b 8b       	std	Y+19, r24	; 0x13
    29e2:	8b 89       	ldd	r24, Y+19	; 0x13
    29e4:	9c 89       	ldd	r25, Y+20	; 0x14
    29e6:	98 8b       	std	Y+16, r25	; 0x10
    29e8:	8f 87       	std	Y+15, r24	; 0x0f
    29ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ec:	98 89       	ldd	r25, Y+16	; 0x10
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <H_LCD_sendCommand+0x220>
    29f2:	98 8b       	std	Y+16, r25	; 0x10
    29f4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		M_DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a0 e8       	ldi	r26, 0x80	; 128
    2a06:	bf e3       	ldi	r27, 0x3F	; 63
    2a08:	8b 87       	std	Y+11, r24	; 0x0b
    2a0a:	9c 87       	std	Y+12, r25	; 0x0c
    2a0c:	ad 87       	std	Y+13, r26	; 0x0d
    2a0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e7       	ldi	r20, 0x7A	; 122
    2a1e:	53 e4       	ldi	r21, 0x43	; 67
    2a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8f 83       	std	Y+7, r24	; 0x07
    2a2a:	98 87       	std	Y+8, r25	; 0x08
    2a2c:	a9 87       	std	Y+9, r26	; 0x09
    2a2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a30:	6f 81       	ldd	r22, Y+7	; 0x07
    2a32:	78 85       	ldd	r23, Y+8	; 0x08
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <H_LCD_sendCommand+0x284>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <H_LCD_sendCommand+0x302>
	else if (__tmp > 65535)
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <H_LCD_sendCommand+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <H_LCD_sendCommand+0x2e4>
    2a94:	89 e1       	ldi	r24, 0x19	; 25
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9c 83       	std	Y+4, r25	; 0x04
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <H_LCD_sendCommand+0x2d2>
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <H_LCD_sendCommand+0x2c6>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <H_LCD_sendCommand+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
    2ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <H_LCD_sendCommand+0x30e>
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif

}
    2ae4:	ab 96       	adiw	r28, 0x2b	; 43
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <H_LCD_sendString>:
void H_LCD_sendString(const u8 *str){
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <H_LCD_sendString+0x6>
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	0b c0       	rjmp	.+22     	; 0x2b1c <H_LCD_sendString+0x26>
	while(*str !='\0')
		H_LCD_sendData(*str++);
    2b06:	e9 81       	ldd	r30, Y+1	; 0x01
    2b08:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0a:	20 81       	ld	r18, Z
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	9a 83       	std	Y+2, r25	; 0x02
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	82 2f       	mov	r24, r18
    2b18:	0e 94 53 12 	call	0x24a6	; 0x24a6 <H_LCD_sendData>
		_delay_ms(1);
#endif

}
void H_LCD_sendString(const u8 *str){
	while(*str !='\0')
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	80 81       	ld	r24, Z
    2b22:	88 23       	and	r24, r24
    2b24:	81 f7       	brne	.-32     	; 0x2b06 <H_LCD_sendString+0x10>
		H_LCD_sendData(*str++);
}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <H_changeCursorPlace>:
void H_changeCursorPlace(u8 row,u8 column){
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	61 97       	sbiw	r28, 0x11	; 17
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	88 8b       	std	Y+16, r24	; 0x10
    2b46:	69 8b       	std	Y+17, r22	; 0x11
	u8 place=0;
    2b48:	1f 86       	std	Y+15, r1	; 0x0f
	if((row>2)||(row<1)||(column>16)||(column<1))
    2b4a:	88 89       	ldd	r24, Y+16	; 0x10
    2b4c:	83 30       	cpi	r24, 0x03	; 3
    2b4e:	48 f4       	brcc	.+18     	; 0x2b62 <H_changeCursorPlace+0x32>
    2b50:	88 89       	ldd	r24, Y+16	; 0x10
    2b52:	88 23       	and	r24, r24
    2b54:	31 f0       	breq	.+12     	; 0x2b62 <H_changeCursorPlace+0x32>
    2b56:	89 89       	ldd	r24, Y+17	; 0x11
    2b58:	81 31       	cpi	r24, 0x11	; 17
    2b5a:	18 f4       	brcc	.+6      	; 0x2b62 <H_changeCursorPlace+0x32>
    2b5c:	89 89       	ldd	r24, Y+17	; 0x11
    2b5e:	88 23       	and	r24, r24
    2b60:	19 f4       	brne	.+6      	; 0x2b68 <H_changeCursorPlace+0x38>
		place=ROW_ONE;
    2b62:	80 e8       	ldi	r24, 0x80	; 128
    2b64:	8f 87       	std	Y+15, r24	; 0x0f
    2b66:	0d c0       	rjmp	.+26     	; 0x2b82 <H_changeCursorPlace+0x52>
	else if (row==1)
    2b68:	88 89       	ldd	r24, Y+16	; 0x10
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	21 f4       	brne	.+8      	; 0x2b76 <H_changeCursorPlace+0x46>
		place=ROW_ONE+column-1;
    2b6e:	89 89       	ldd	r24, Y+17	; 0x11
    2b70:	81 58       	subi	r24, 0x81	; 129
    2b72:	8f 87       	std	Y+15, r24	; 0x0f
    2b74:	06 c0       	rjmp	.+12     	; 0x2b82 <H_changeCursorPlace+0x52>
	else if (row==2)
    2b76:	88 89       	ldd	r24, Y+16	; 0x10
    2b78:	82 30       	cpi	r24, 0x02	; 2
    2b7a:	19 f4       	brne	.+6      	; 0x2b82 <H_changeCursorPlace+0x52>
		place=ROW_TWO+column-1;
    2b7c:	89 89       	ldd	r24, Y+17	; 0x11
    2b7e:	81 54       	subi	r24, 0x41	; 65
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
	H_LCD_sendCommand(place);
    2b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b84:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a0 e8       	ldi	r26, 0x80	; 128
    2b8e:	bf e3       	ldi	r27, 0x3F	; 63
    2b90:	8b 87       	std	Y+11, r24	; 0x0b
    2b92:	9c 87       	std	Y+12, r25	; 0x0c
    2b94:	ad 87       	std	Y+13, r26	; 0x0d
    2b96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	4a e7       	ldi	r20, 0x7A	; 122
    2ba6:	53 e4       	ldi	r21, 0x43	; 67
    2ba8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	8f 83       	std	Y+7, r24	; 0x07
    2bb2:	98 87       	std	Y+8, r25	; 0x08
    2bb4:	a9 87       	std	Y+9, r26	; 0x09
    2bb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	2c f4       	brge	.+10     	; 0x2bda <H_changeCursorPlace+0xaa>
		__ticks = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	3f c0       	rjmp	.+126    	; 0x2c58 <H_changeCursorPlace+0x128>
	else if (__tmp > 65535)
    2bda:	6f 81       	ldd	r22, Y+7	; 0x07
    2bdc:	78 85       	ldd	r23, Y+8	; 0x08
    2bde:	89 85       	ldd	r24, Y+9	; 0x09
    2be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	3f ef       	ldi	r19, 0xFF	; 255
    2be6:	4f e7       	ldi	r20, 0x7F	; 127
    2be8:	57 e4       	ldi	r21, 0x47	; 71
    2bea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bee:	18 16       	cp	r1, r24
    2bf0:	4c f5       	brge	.+82     	; 0x2c44 <H_changeCursorPlace+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e2       	ldi	r20, 0x20	; 32
    2c00:	51 e4       	ldi	r21, 0x41	; 65
    2c02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
    2c1a:	0f c0       	rjmp	.+30     	; 0x2c3a <H_changeCursorPlace+0x10a>
    2c1c:	89 e1       	ldi	r24, 0x19	; 25
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9c 83       	std	Y+4, r25	; 0x04
    2c22:	8b 83       	std	Y+3, r24	; 0x03
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	9c 81       	ldd	r25, Y+4	; 0x04
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <H_changeCursorPlace+0xf8>
    2c2c:	9c 83       	std	Y+4, r25	; 0x04
    2c2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	9e 81       	ldd	r25, Y+6	; 0x06
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	69 f7       	brne	.-38     	; 0x2c1c <H_changeCursorPlace+0xec>
    2c42:	14 c0       	rjmp	.+40     	; 0x2c6c <H_changeCursorPlace+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <H_changeCursorPlace+0x134>
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2c6c:	61 96       	adiw	r28, 0x11	; 17
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <H_sendNumber>:
void H_sendNumber(const u16 number){
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	29 97       	sbiw	r28, 0x09	; 9
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	99 87       	std	Y+9, r25	; 0x09
    2c94:	88 87       	std	Y+8, r24	; 0x08
	char buffer[6];
	sprintf(buffer,"%u",number);
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <H_sendNumber+0x1a>
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <H_sendNumber+0x1c>
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <H_sendNumber+0x1e>
    2c9c:	ed b7       	in	r30, 0x3d	; 61
    2c9e:	fe b7       	in	r31, 0x3e	; 62
    2ca0:	31 96       	adiw	r30, 0x01	; 1
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	02 96       	adiw	r24, 0x02	; 2
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	80 83       	st	Z, r24
    2caa:	80 e6       	ldi	r24, 0x60	; 96
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	93 83       	std	Z+3, r25	; 0x03
    2cb0:	82 83       	std	Z+2, r24	; 0x02
    2cb2:	88 85       	ldd	r24, Y+8	; 0x08
    2cb4:	99 85       	ldd	r25, Y+9	; 0x09
    2cb6:	95 83       	std	Z+5, r25	; 0x05
    2cb8:	84 83       	std	Z+4, r24	; 0x04
    2cba:	0e 94 07 19 	call	0x320e	; 0x320e <sprintf>
    2cbe:	8d b7       	in	r24, 0x3d	; 61
    2cc0:	9e b7       	in	r25, 0x3e	; 62
    2cc2:	06 96       	adiw	r24, 0x06	; 6
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	9e bf       	out	0x3e, r25	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	8d bf       	out	0x3d, r24	; 61
	for (u8 i = 0; buffer[i] != '\0'; i++)
    2cce:	19 82       	std	Y+1, r1	; 0x01
    2cd0:	0e c0       	rjmp	.+28     	; 0x2cee <H_sendNumber+0x70>
		H_LCD_sendData(buffer[i]); // Send each character to the LCD
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	ce 01       	movw	r24, r28
    2cda:	02 96       	adiw	r24, 0x02	; 2
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e2 0f       	add	r30, r18
    2ce0:	f3 1f       	adc	r31, r19
    2ce2:	80 81       	ld	r24, Z
    2ce4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <H_LCD_sendData>

}
void H_sendNumber(const u16 number){
	char buffer[6];
	sprintf(buffer,"%u",number);
	for (u8 i = 0; buffer[i] != '\0'; i++)
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	8f 5f       	subi	r24, 0xFF	; 255
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	02 96       	adiw	r24, 0x02	; 2
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	e2 0f       	add	r30, r18
    2cfc:	f3 1f       	adc	r31, r19
    2cfe:	80 81       	ld	r24, Z
    2d00:	88 23       	and	r24, r24
    2d02:	39 f7       	brne	.-50     	; 0x2cd2 <H_sendNumber+0x54>
		H_LCD_sendData(buffer[i]); // Send each character to the LCD
}
    2d04:	29 96       	adiw	r28, 0x09	; 9
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <H_keyPad_Init>:
 *
 *  Created on: Sep 5, 2024
 *      Author: Nourhan Mohamed Hassan
 */
#include "H_KeyPad.h"
void H_keyPad_Init(){
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
	M_DIO_SetPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN0,OUTPUT);
    2d1e:	83 e0       	ldi	r24, 0x03	; 3
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN1,OUTPUT);
    2d28:	83 e0       	ldi	r24, 0x03	; 3
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN2,OUTPUT);
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	62 e0       	ldi	r22, 0x02	; 2
    2d36:	41 e0       	ldi	r20, 0x01	; 1
    2d38:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN3,OUTPUT);
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	63 e0       	ldi	r22, 0x03	; 3
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_PIN4,INPUT);
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	64 e0       	ldi	r22, 0x04	; 4
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_PIN5,INPUT);
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	65 e0       	ldi	r22, 0x05	; 5
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_PIN6,INPUT);
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	66 e0       	ldi	r22, 0x06	; 6
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_SetPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_PIN7,INPUT);
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	67 e0       	ldi	r22, 0x07	; 7
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_DIO_SetPinDirection>
	M_DIO_EnablPullup(KEYPAD_COL_PORT, KEYPAD_COL_PIN4);
    2d6e:	83 e0       	ldi	r24, 0x03	; 3
    2d70:	64 e0       	ldi	r22, 0x04	; 4
    2d72:	0e 94 57 0b 	call	0x16ae	; 0x16ae <M_DIO_EnablPullup>
	M_DIO_EnablPullup(KEYPAD_COL_PORT, KEYPAD_COL_PIN5);
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	65 e0       	ldi	r22, 0x05	; 5
    2d7a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <M_DIO_EnablPullup>
	M_DIO_EnablPullup(KEYPAD_COL_PORT, KEYPAD_COL_PIN6);
    2d7e:	83 e0       	ldi	r24, 0x03	; 3
    2d80:	66 e0       	ldi	r22, 0x06	; 6
    2d82:	0e 94 57 0b 	call	0x16ae	; 0x16ae <M_DIO_EnablPullup>
	M_DIO_EnablPullup(KEYPAD_COL_PORT, KEYPAD_COL_PIN7);
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	67 e0       	ldi	r22, 0x07	; 7
    2d8a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <M_DIO_EnablPullup>
}
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <H_GetKeyPadPressed>:
void H_GetKeyPadPressed(u8 *value){
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	6a 97       	sbiw	r28, 0x1a	; 26
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	9d 8b       	std	Y+21, r25	; 0x15
    2daa:	8c 8b       	std	Y+20, r24	; 0x14
	u8 arr[4][4]={
			{'7','8','9','/'},
			{'4','5','6','*'},
			{'1','2','3','-'},
			{'A','0','=','+'}
	};
    2dac:	ce 01       	movw	r24, r28
    2dae:	03 96       	adiw	r24, 0x03	; 3
    2db0:	9f 8b       	std	Y+23, r25	; 0x17
    2db2:	8e 8b       	std	Y+22, r24	; 0x16
    2db4:	eb e8       	ldi	r30, 0x8B	; 139
    2db6:	f1 e0       	ldi	r31, 0x01	; 1
    2db8:	f9 8f       	std	Y+25, r31	; 0x19
    2dba:	e8 8f       	std	Y+24, r30	; 0x18
    2dbc:	f0 e1       	ldi	r31, 0x10	; 16
    2dbe:	fa 8f       	std	Y+26, r31	; 0x1a
    2dc0:	e8 8d       	ldd	r30, Y+24	; 0x18
    2dc2:	f9 8d       	ldd	r31, Y+25	; 0x19
    2dc4:	00 80       	ld	r0, Z
    2dc6:	88 8d       	ldd	r24, Y+24	; 0x18
    2dc8:	99 8d       	ldd	r25, Y+25	; 0x19
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	99 8f       	std	Y+25, r25	; 0x19
    2dce:	88 8f       	std	Y+24, r24	; 0x18
    2dd0:	ee 89       	ldd	r30, Y+22	; 0x16
    2dd2:	ff 89       	ldd	r31, Y+23	; 0x17
    2dd4:	00 82       	st	Z, r0
    2dd6:	8e 89       	ldd	r24, Y+22	; 0x16
    2dd8:	9f 89       	ldd	r25, Y+23	; 0x17
    2dda:	01 96       	adiw	r24, 0x01	; 1
    2ddc:	9f 8b       	std	Y+23, r25	; 0x17
    2dde:	8e 8b       	std	Y+22, r24	; 0x16
    2de0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2de2:	91 50       	subi	r25, 0x01	; 1
    2de4:	9a 8f       	std	Y+26, r25	; 0x1a
    2de6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2de8:	ee 23       	and	r30, r30
    2dea:	51 f7       	brne	.-44     	; 0x2dc0 <H_GetKeyPadPressed+0x2c>

	u8 row=0,col=0;
    2dec:	1a 82       	std	Y+2, r1	; 0x02
    2dee:	19 82       	std	Y+1, r1	; 0x01
	*value=NOT_PRESSED;
    2df0:	ec 89       	ldd	r30, Y+20	; 0x14
    2df2:	fd 89       	ldd	r31, Y+21	; 0x15
    2df4:	8f ef       	ldi	r24, 0xFF	; 255
    2df6:	80 83       	st	Z, r24
	u8 readVal;
	for(row=0;row<ROWS_NUMBER;row++){
    2df8:	1a 82       	std	Y+2, r1	; 0x02
    2dfa:	4c c0       	rjmp	.+152    	; 0x2e94 <H_GetKeyPadPressed+0x100>
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN0,HIGH);
    2dfc:	83 e0       	ldi	r24, 0x03	; 3
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	41 e0       	ldi	r20, 0x01	; 1
    2e02:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN1,HIGH);
    2e06:	83 e0       	ldi	r24, 0x03	; 3
    2e08:	61 e0       	ldi	r22, 0x01	; 1
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN2,HIGH);
    2e10:	83 e0       	ldi	r24, 0x03	; 3
    2e12:	62 e0       	ldi	r22, 0x02	; 2
    2e14:	41 e0       	ldi	r20, 0x01	; 1
    2e16:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN3,HIGH);
    2e1a:	83 e0       	ldi	r24, 0x03	; 3
    2e1c:	63 e0       	ldi	r22, 0x03	; 3
    2e1e:	41 e0       	ldi	r20, 0x01	; 1
    2e20:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,row,LOW);
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	6a 81       	ldd	r22, Y+2	; 0x02
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_DIO_SetPinValue>
		for(col=0;col<COL_NUMBER;col++){
    2e2e:	19 82       	std	Y+1, r1	; 0x01
    2e30:	28 c0       	rjmp	.+80     	; 0x2e82 <H_GetKeyPadPressed+0xee>
			M_DIO_GetPinValue(KEYPAD_COL_PORT,col+COL_NUMBER,&readVal);
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	98 2f       	mov	r25, r24
    2e36:	9c 5f       	subi	r25, 0xFC	; 252
    2e38:	9e 01       	movw	r18, r28
    2e3a:	2d 5e       	subi	r18, 0xED	; 237
    2e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	69 2f       	mov	r22, r25
    2e42:	a9 01       	movw	r20, r18
    2e44:	0e 94 e6 09 	call	0x13cc	; 0x13cc <M_DIO_GetPinValue>
			if (readVal==0){
    2e48:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4a:	88 23       	and	r24, r24
    2e4c:	b9 f4       	brne	.+46     	; 0x2e7c <H_GetKeyPadPressed+0xe8>
				*value=arr[row][col];
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	48 2f       	mov	r20, r24
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	22 0f       	add	r18, r18
    2e5c:	33 1f       	adc	r19, r19
    2e5e:	22 0f       	add	r18, r18
    2e60:	33 1f       	adc	r19, r19
    2e62:	ce 01       	movw	r24, r28
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	84 0f       	add	r24, r20
    2e6c:	95 1f       	adc	r25, r21
    2e6e:	fc 01       	movw	r30, r24
    2e70:	32 96       	adiw	r30, 0x02	; 2
    2e72:	80 81       	ld	r24, Z
    2e74:	ec 89       	ldd	r30, Y+20	; 0x14
    2e76:	fd 89       	ldd	r31, Y+21	; 0x15
    2e78:	80 83       	st	Z, r24
    2e7a:	06 c0       	rjmp	.+12     	; 0x2e88 <H_GetKeyPadPressed+0xf4>
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN0,HIGH);
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN1,HIGH);
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN2,HIGH);
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN3,HIGH);
		M_DIO_SetPinValue(KEYPAD_ROW_PORT,row,LOW);
		for(col=0;col<COL_NUMBER;col++){
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	8f 5f       	subi	r24, 0xFF	; 255
    2e80:	89 83       	std	Y+1, r24	; 0x01
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	84 30       	cpi	r24, 0x04	; 4
    2e86:	a8 f2       	brcs	.-86     	; 0x2e32 <H_GetKeyPadPressed+0x9e>
			if (readVal==0){
				*value=arr[row][col];
				break;
			}
	}
		if (readVal==0)
    2e88:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8a:	88 23       	and	r24, r24
    2e8c:	39 f0       	breq	.+14     	; 0x2e9c <H_GetKeyPadPressed+0x108>
	};

	u8 row=0,col=0;
	*value=NOT_PRESSED;
	u8 readVal;
	for(row=0;row<ROWS_NUMBER;row++){
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	8f 5f       	subi	r24, 0xFF	; 255
    2e92:	8a 83       	std	Y+2, r24	; 0x02
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	84 30       	cpi	r24, 0x04	; 4
    2e98:	08 f4       	brcc	.+2      	; 0x2e9c <H_GetKeyPadPressed+0x108>
    2e9a:	b0 cf       	rjmp	.-160    	; 0x2dfc <H_GetKeyPadPressed+0x68>
		if (readVal==0)
			break;

}

}
    2e9c:	6a 96       	adiw	r28, 0x1a	; 26
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <delay>:
// 1M Hz -> 1million instruction per second
#include "HAL/H_LCD_Driver/H_LCD.h"
#include "HAL/H_KeyPad_Driver/H_KeyPad.h"
void delay() {
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <delay+0x6>
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
	//for loop consists of 5 instruction assembly
	//5 *65535 /1000000 -> 1/3 second
	for (u16 i = 0; i < 65535; i++)
    2eb8:	1a 82       	std	Y+2, r1	; 0x02
    2eba:	19 82       	std	Y+1, r1	; 0x01
    2ebc:	05 c0       	rjmp	.+10     	; 0x2ec8 <delay+0x1a>
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	01 96       	adiw	r24, 0x01	; 1
    2ec4:	9a 83       	std	Y+2, r25	; 0x02
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	2f ef       	ldi	r18, 0xFF	; 255
    2ece:	8f 3f       	cpi	r24, 0xFF	; 255
    2ed0:	92 07       	cpc	r25, r18
    2ed2:	a9 f7       	brne	.-22     	; 0x2ebe <delay+0x10>
		;
}
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <main>:
int main() {
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	66 97       	sbiw	r28, 0x16	; 22
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
	u8 op1, op2, operator, op2_flag = 0, result = 0;
    2ef2:	18 8a       	std	Y+16, r1	; 0x10
    2ef4:	1f 86       	std	Y+15, r1	; 0x0f
	H_LCD_Init();
    2ef6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <H_LCD_Init>
	H_keyPad_Init();
    2efa:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <H_keyPad_Init>
	volatile u8 value = NOT_PRESSED;
    2efe:	8f ef       	ldi	r24, 0xFF	; 255
    2f00:	8c 8b       	std	Y+20, r24	; 0x14
	while (1) {
		H_GetKeyPadPressed(&value);
    2f02:	ce 01       	movw	r24, r28
    2f04:	44 96       	adiw	r24, 0x14	; 20
    2f06:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <H_GetKeyPadPressed>
		if (value != NOT_PRESSED) {
    2f0a:	8c 89       	ldd	r24, Y+20	; 0x14
    2f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <main+0x34>
    2f10:	a6 c0       	rjmp	.+332    	; 0x305e <main+0x180>
			if (result == 1) {
    2f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	21 f4       	brne	.+8      	; 0x2f20 <main+0x42>
				result = 0;
    2f18:	1f 86       	std	Y+15, r1	; 0x0f
				H_LCD_sendCommand(CLEAR_DISPLAY);
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
			}
			H_LCD_sendData(value); //2 + 5  =
    2f20:	8c 89       	ldd	r24, Y+20	; 0x14
    2f22:	0e 94 53 12 	call	0x24a6	; 0x24a6 <H_LCD_sendData>
			if (value == 'A') {
    2f26:	8c 89       	ldd	r24, Y+20	; 0x14
    2f28:	81 34       	cpi	r24, 0x41	; 65
    2f2a:	29 f4       	brne	.+10     	; 0x2f36 <main+0x58>
				H_LCD_sendCommand(CLEAR_DISPLAY);
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <H_LCD_sendCommand>
				op2_flag = 0;
    2f32:	18 8a       	std	Y+16, r1	; 0x10
    2f34:	94 c0       	rjmp	.+296    	; 0x305e <main+0x180>
			} else if ((value >= '0') && (value <= '9')) //2 5
    2f36:	8c 89       	ldd	r24, Y+20	; 0x14
    2f38:	80 33       	cpi	r24, 0x30	; 48
    2f3a:	a8 f0       	brcs	.+42     	; 0x2f66 <main+0x88>
    2f3c:	8c 89       	ldd	r24, Y+20	; 0x14
    2f3e:	8a 33       	cpi	r24, 0x3A	; 58
    2f40:	90 f4       	brcc	.+36     	; 0x2f66 <main+0x88>
					{
				if (op2_flag == 0) { //operand 1 is not assigned ->0
    2f42:	88 89       	ldd	r24, Y+16	; 0x10
    2f44:	88 23       	and	r24, r24
    2f46:	31 f4       	brne	.+12     	; 0x2f54 <main+0x76>
					op1 = value - '0'; //op1=2
    2f48:	8c 89       	ldd	r24, Y+20	; 0x14
    2f4a:	80 53       	subi	r24, 0x30	; 48
    2f4c:	8b 8b       	std	Y+19, r24	; 0x13
					op2_flag = 1; //1
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	88 8b       	std	Y+16, r24	; 0x10
    2f52:	85 c0       	rjmp	.+266    	; 0x305e <main+0x180>
				} else if (op2_flag == 1) {
    2f54:	88 89       	ldd	r24, Y+16	; 0x10
    2f56:	81 30       	cpi	r24, 0x01	; 1
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <main+0x7e>
    2f5a:	81 c0       	rjmp	.+258    	; 0x305e <main+0x180>
					op2 = value - '0'; //5
    2f5c:	8c 89       	ldd	r24, Y+20	; 0x14
    2f5e:	80 53       	subi	r24, 0x30	; 48
    2f60:	8a 8b       	std	Y+18, r24	; 0x12
					op2_flag = 0; //0
    2f62:	18 8a       	std	Y+16, r1	; 0x10
    2f64:	7c c0       	rjmp	.+248    	; 0x305e <main+0x180>
				}
			} else if (value == '=') {
    2f66:	8c 89       	ldd	r24, Y+20	; 0x14
    2f68:	8d 33       	cpi	r24, 0x3D	; 61
    2f6a:	09 f0       	breq	.+2      	; 0x2f6e <main+0x90>
    2f6c:	76 c0       	rjmp	.+236    	; 0x305a <main+0x17c>
				switch (operator) { //H_sendNumber
    2f6e:	89 89       	ldd	r24, Y+17	; 0x11
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	3e 8b       	std	Y+22, r19	; 0x16
    2f76:	2d 8b       	std	Y+21, r18	; 0x15
    2f78:	4d 89       	ldd	r20, Y+21	; 0x15
    2f7a:	5e 89       	ldd	r21, Y+22	; 0x16
    2f7c:	4b 32       	cpi	r20, 0x2B	; 43
    2f7e:	51 05       	cpc	r21, r1
    2f80:	b9 f0       	breq	.+46     	; 0x2fb0 <main+0xd2>
    2f82:	8d 89       	ldd	r24, Y+21	; 0x15
    2f84:	9e 89       	ldd	r25, Y+22	; 0x16
    2f86:	8c 32       	cpi	r24, 0x2C	; 44
    2f88:	91 05       	cpc	r25, r1
    2f8a:	34 f4       	brge	.+12     	; 0x2f98 <main+0xba>
    2f8c:	2d 89       	ldd	r18, Y+21	; 0x15
    2f8e:	3e 89       	ldd	r19, Y+22	; 0x16
    2f90:	2a 32       	cpi	r18, 0x2A	; 42
    2f92:	31 05       	cpc	r19, r1
    2f94:	c1 f1       	breq	.+112    	; 0x3006 <main+0x128>
    2f96:	63 c0       	rjmp	.+198    	; 0x305e <main+0x180>
    2f98:	4d 89       	ldd	r20, Y+21	; 0x15
    2f9a:	5e 89       	ldd	r21, Y+22	; 0x16
    2f9c:	4d 32       	cpi	r20, 0x2D	; 45
    2f9e:	51 05       	cpc	r21, r1
    2fa0:	a1 f0       	breq	.+40     	; 0x2fca <main+0xec>
    2fa2:	8d 89       	ldd	r24, Y+21	; 0x15
    2fa4:	9e 89       	ldd	r25, Y+22	; 0x16
    2fa6:	8f 32       	cpi	r24, 0x2F	; 47
    2fa8:	91 05       	cpc	r25, r1
    2faa:	09 f4       	brne	.+2      	; 0x2fae <main+0xd0>
    2fac:	3f c0       	rjmp	.+126    	; 0x302c <main+0x14e>
    2fae:	57 c0       	rjmp	.+174    	; 0x305e <main+0x180>
				case '+':
					H_sendNumber((op1 + op2));
    2fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	8a 89       	ldd	r24, Y+18	; 0x12
    2fb8:	88 2f       	mov	r24, r24
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	82 0f       	add	r24, r18
    2fbe:	93 1f       	adc	r25, r19
    2fc0:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <H_sendNumber>
					result = 1;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	8f 87       	std	Y+15, r24	; 0x0f
    2fc8:	4a c0       	rjmp	.+148    	; 0x305e <main+0x180>
					break;
				case '-':
					if((op1 - op2)<0)
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	28 2f       	mov	r18, r24
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	8a 89       	ldd	r24, Y+18	; 0x12
    2fd2:	88 2f       	mov	r24, r24
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	a9 01       	movw	r20, r18
    2fd8:	48 1b       	sub	r20, r24
    2fda:	59 0b       	sbc	r21, r25
    2fdc:	ca 01       	movw	r24, r20
    2fde:	99 23       	and	r25, r25
    2fe0:	1c f4       	brge	.+6      	; 0x2fe8 <main+0x10a>
					H_LCD_sendData('-');
    2fe2:	8d e2       	ldi	r24, 0x2D	; 45
    2fe4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <H_LCD_sendData>
					H_sendNumber((op2 - op1));
    2fe8:	8a 89       	ldd	r24, Y+18	; 0x12
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a9 01       	movw	r20, r18
    2ff6:	48 1b       	sub	r20, r24
    2ff8:	59 0b       	sbc	r21, r25
    2ffa:	ca 01       	movw	r24, r20
    2ffc:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <H_sendNumber>
					result = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	8f 87       	std	Y+15, r24	; 0x0f
    3004:	2c c0       	rjmp	.+88     	; 0x305e <main+0x180>
					break;
				case '*':
					H_sendNumber((op1 * op2));
    3006:	8b 89       	ldd	r24, Y+19	; 0x13
    3008:	28 2f       	mov	r18, r24
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	8a 89       	ldd	r24, Y+18	; 0x12
    300e:	88 2f       	mov	r24, r24
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	ac 01       	movw	r20, r24
    3014:	24 9f       	mul	r18, r20
    3016:	c0 01       	movw	r24, r0
    3018:	25 9f       	mul	r18, r21
    301a:	90 0d       	add	r25, r0
    301c:	34 9f       	mul	r19, r20
    301e:	90 0d       	add	r25, r0
    3020:	11 24       	eor	r1, r1
    3022:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <H_sendNumber>
					result = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	8f 87       	std	Y+15, r24	; 0x0f
    302a:	19 c0       	rjmp	.+50     	; 0x305e <main+0x180>
					break;
				case '/':
					if((operator=='/')&&(op2==0))
    302c:	89 89       	ldd	r24, Y+17	; 0x11
    302e:	8f 32       	cpi	r24, 0x2F	; 47
    3030:	41 f4       	brne	.+16     	; 0x3042 <main+0x164>
    3032:	8a 89       	ldd	r24, Y+18	; 0x12
    3034:	88 23       	and	r24, r24
    3036:	29 f4       	brne	.+10     	; 0x3042 <main+0x164>
						H_LCD_sendString("Not Allowed");
    3038:	83 e6       	ldi	r24, 0x63	; 99
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <H_LCD_sendString>
    3040:	09 c0       	rjmp	.+18     	; 0x3054 <main+0x176>
					else
					H_sendNumber((op1 / op2));
    3042:	8b 89       	ldd	r24, Y+19	; 0x13
    3044:	9a 89       	ldd	r25, Y+18	; 0x12
    3046:	69 2f       	mov	r22, r25
    3048:	0e 94 a2 18 	call	0x3144	; 0x3144 <__udivmodqi4>
    304c:	88 2f       	mov	r24, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <H_sendNumber>
					result = 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	8f 87       	std	Y+15, r24	; 0x0f
    3058:	02 c0       	rjmp	.+4      	; 0x305e <main+0x180>
					break;
				}
			}

			else {
				operator = value; //'+'
    305a:	8c 89       	ldd	r24, Y+20	; 0x14
    305c:	89 8b       	std	Y+17, r24	; 0x11
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	a0 e2       	ldi	r26, 0x20	; 32
    3064:	b3 e4       	ldi	r27, 0x43	; 67
    3066:	8b 87       	std	Y+11, r24	; 0x0b
    3068:	9c 87       	std	Y+12, r25	; 0x0c
    306a:	ad 87       	std	Y+13, r26	; 0x0d
    306c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3070:	7c 85       	ldd	r23, Y+12	; 0x0c
    3072:	8d 85       	ldd	r24, Y+13	; 0x0d
    3074:	9e 85       	ldd	r25, Y+14	; 0x0e
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	4a e7       	ldi	r20, 0x7A	; 122
    307c:	53 e4       	ldi	r21, 0x43	; 67
    307e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	8f 83       	std	Y+7, r24	; 0x07
    3088:	98 87       	std	Y+8, r25	; 0x08
    308a:	a9 87       	std	Y+9, r26	; 0x09
    308c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    308e:	6f 81       	ldd	r22, Y+7	; 0x07
    3090:	78 85       	ldd	r23, Y+8	; 0x08
    3092:	89 85       	ldd	r24, Y+9	; 0x09
    3094:	9a 85       	ldd	r25, Y+10	; 0x0a
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e8       	ldi	r20, 0x80	; 128
    309c:	5f e3       	ldi	r21, 0x3F	; 63
    309e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30a2:	88 23       	and	r24, r24
    30a4:	2c f4       	brge	.+10     	; 0x30b0 <main+0x1d2>
		__ticks = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9e 83       	std	Y+6, r25	; 0x06
    30ac:	8d 83       	std	Y+5, r24	; 0x05
    30ae:	3f c0       	rjmp	.+126    	; 0x312e <main+0x250>
	else if (__tmp > 65535)
    30b0:	6f 81       	ldd	r22, Y+7	; 0x07
    30b2:	78 85       	ldd	r23, Y+8	; 0x08
    30b4:	89 85       	ldd	r24, Y+9	; 0x09
    30b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	4c f5       	brge	.+82     	; 0x311a <main+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    30cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e2       	ldi	r20, 0x20	; 32
    30d6:	51 e4       	ldi	r21, 0x41	; 65
    30d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
    30f0:	0f c0       	rjmp	.+30     	; 0x3110 <main+0x232>
    30f2:	89 e1       	ldi	r24, 0x19	; 25
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	9c 83       	std	Y+4, r25	; 0x04
    30f8:	8b 83       	std	Y+3, r24	; 0x03
    30fa:	8b 81       	ldd	r24, Y+3	; 0x03
    30fc:	9c 81       	ldd	r25, Y+4	; 0x04
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <main+0x220>
    3102:	9c 83       	std	Y+4, r25	; 0x04
    3104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3106:	8d 81       	ldd	r24, Y+5	; 0x05
    3108:	9e 81       	ldd	r25, Y+6	; 0x06
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	9e 83       	std	Y+6, r25	; 0x06
    310e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	9e 81       	ldd	r25, Y+6	; 0x06
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	69 f7       	brne	.-38     	; 0x30f2 <main+0x214>
    3118:	f4 ce       	rjmp	.-536    	; 0x2f02 <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311a:	6f 81       	ldd	r22, Y+7	; 0x07
    311c:	78 85       	ldd	r23, Y+8	; 0x08
    311e:	89 85       	ldd	r24, Y+9	; 0x09
    3120:	9a 85       	ldd	r25, Y+10	; 0x0a
    3122:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9e 83       	std	Y+6, r25	; 0x06
    312c:	8d 83       	std	Y+5, r24	; 0x05
    312e:	8d 81       	ldd	r24, Y+5	; 0x05
    3130:	9e 81       	ldd	r25, Y+6	; 0x06
    3132:	9a 83       	std	Y+2, r25	; 0x02
    3134:	89 83       	std	Y+1, r24	; 0x01
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	9a 81       	ldd	r25, Y+2	; 0x02
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <main+0x25c>
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	89 83       	std	Y+1, r24	; 0x01
    3142:	df ce       	rjmp	.-578    	; 0x2f02 <main+0x24>

00003144 <__udivmodqi4>:
    3144:	99 1b       	sub	r25, r25
    3146:	79 e0       	ldi	r23, 0x09	; 9
    3148:	04 c0       	rjmp	.+8      	; 0x3152 <__udivmodqi4_ep>

0000314a <__udivmodqi4_loop>:
    314a:	99 1f       	adc	r25, r25
    314c:	96 17       	cp	r25, r22
    314e:	08 f0       	brcs	.+2      	; 0x3152 <__udivmodqi4_ep>
    3150:	96 1b       	sub	r25, r22

00003152 <__udivmodqi4_ep>:
    3152:	88 1f       	adc	r24, r24
    3154:	7a 95       	dec	r23
    3156:	c9 f7       	brne	.-14     	; 0x314a <__udivmodqi4_loop>
    3158:	80 95       	com	r24
    315a:	08 95       	ret

0000315c <__udivmodsi4>:
    315c:	a1 e2       	ldi	r26, 0x21	; 33
    315e:	1a 2e       	mov	r1, r26
    3160:	aa 1b       	sub	r26, r26
    3162:	bb 1b       	sub	r27, r27
    3164:	fd 01       	movw	r30, r26
    3166:	0d c0       	rjmp	.+26     	; 0x3182 <__udivmodsi4_ep>

00003168 <__udivmodsi4_loop>:
    3168:	aa 1f       	adc	r26, r26
    316a:	bb 1f       	adc	r27, r27
    316c:	ee 1f       	adc	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	a2 17       	cp	r26, r18
    3172:	b3 07       	cpc	r27, r19
    3174:	e4 07       	cpc	r30, r20
    3176:	f5 07       	cpc	r31, r21
    3178:	20 f0       	brcs	.+8      	; 0x3182 <__udivmodsi4_ep>
    317a:	a2 1b       	sub	r26, r18
    317c:	b3 0b       	sbc	r27, r19
    317e:	e4 0b       	sbc	r30, r20
    3180:	f5 0b       	sbc	r31, r21

00003182 <__udivmodsi4_ep>:
    3182:	66 1f       	adc	r22, r22
    3184:	77 1f       	adc	r23, r23
    3186:	88 1f       	adc	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	1a 94       	dec	r1
    318c:	69 f7       	brne	.-38     	; 0x3168 <__udivmodsi4_loop>
    318e:	60 95       	com	r22
    3190:	70 95       	com	r23
    3192:	80 95       	com	r24
    3194:	90 95       	com	r25
    3196:	9b 01       	movw	r18, r22
    3198:	ac 01       	movw	r20, r24
    319a:	bd 01       	movw	r22, r26
    319c:	cf 01       	movw	r24, r30
    319e:	08 95       	ret

000031a0 <__prologue_saves__>:
    31a0:	2f 92       	push	r2
    31a2:	3f 92       	push	r3
    31a4:	4f 92       	push	r4
    31a6:	5f 92       	push	r5
    31a8:	6f 92       	push	r6
    31aa:	7f 92       	push	r7
    31ac:	8f 92       	push	r8
    31ae:	9f 92       	push	r9
    31b0:	af 92       	push	r10
    31b2:	bf 92       	push	r11
    31b4:	cf 92       	push	r12
    31b6:	df 92       	push	r13
    31b8:	ef 92       	push	r14
    31ba:	ff 92       	push	r15
    31bc:	0f 93       	push	r16
    31be:	1f 93       	push	r17
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	ca 1b       	sub	r28, r26
    31ca:	db 0b       	sbc	r29, r27
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	09 94       	ijmp

000031d8 <__epilogue_restores__>:
    31d8:	2a 88       	ldd	r2, Y+18	; 0x12
    31da:	39 88       	ldd	r3, Y+17	; 0x11
    31dc:	48 88       	ldd	r4, Y+16	; 0x10
    31de:	5f 84       	ldd	r5, Y+15	; 0x0f
    31e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    31e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    31e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    31e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ea:	b9 84       	ldd	r11, Y+9	; 0x09
    31ec:	c8 84       	ldd	r12, Y+8	; 0x08
    31ee:	df 80       	ldd	r13, Y+7	; 0x07
    31f0:	ee 80       	ldd	r14, Y+6	; 0x06
    31f2:	fd 80       	ldd	r15, Y+5	; 0x05
    31f4:	0c 81       	ldd	r16, Y+4	; 0x04
    31f6:	1b 81       	ldd	r17, Y+3	; 0x03
    31f8:	aa 81       	ldd	r26, Y+2	; 0x02
    31fa:	b9 81       	ldd	r27, Y+1	; 0x01
    31fc:	ce 0f       	add	r28, r30
    31fe:	d1 1d       	adc	r29, r1
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	ed 01       	movw	r28, r26
    320c:	08 95       	ret

0000320e <sprintf>:
    320e:	ae e0       	ldi	r26, 0x0E	; 14
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	ed e0       	ldi	r30, 0x0D	; 13
    3214:	f9 e1       	ldi	r31, 0x19	; 25
    3216:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__prologue_saves__+0x1c>
    321a:	0d 89       	ldd	r16, Y+21	; 0x15
    321c:	1e 89       	ldd	r17, Y+22	; 0x16
    321e:	86 e0       	ldi	r24, 0x06	; 6
    3220:	8c 83       	std	Y+4, r24	; 0x04
    3222:	1a 83       	std	Y+2, r17	; 0x02
    3224:	09 83       	std	Y+1, r16	; 0x01
    3226:	8f ef       	ldi	r24, 0xFF	; 255
    3228:	9f e7       	ldi	r25, 0x7F	; 127
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
    322e:	9e 01       	movw	r18, r28
    3230:	27 5e       	subi	r18, 0xE7	; 231
    3232:	3f 4f       	sbci	r19, 0xFF	; 255
    3234:	ce 01       	movw	r24, r28
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	6f 89       	ldd	r22, Y+23	; 0x17
    323a:	78 8d       	ldd	r23, Y+24	; 0x18
    323c:	a9 01       	movw	r20, r18
    323e:	0e 94 2b 19 	call	0x3256	; 0x3256 <vfprintf>
    3242:	2f 81       	ldd	r18, Y+7	; 0x07
    3244:	38 85       	ldd	r19, Y+8	; 0x08
    3246:	02 0f       	add	r16, r18
    3248:	13 1f       	adc	r17, r19
    324a:	f8 01       	movw	r30, r16
    324c:	10 82       	st	Z, r1
    324e:	2e 96       	adiw	r28, 0x0e	; 14
    3250:	e4 e0       	ldi	r30, 0x04	; 4
    3252:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__epilogue_restores__+0x1c>

00003256 <vfprintf>:
    3256:	ab e0       	ldi	r26, 0x0B	; 11
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e1 e3       	ldi	r30, 0x31	; 49
    325c:	f9 e1       	ldi	r31, 0x19	; 25
    325e:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__>
    3262:	3c 01       	movw	r6, r24
    3264:	2b 01       	movw	r4, r22
    3266:	5a 01       	movw	r10, r20
    3268:	fc 01       	movw	r30, r24
    326a:	17 82       	std	Z+7, r1	; 0x07
    326c:	16 82       	std	Z+6, r1	; 0x06
    326e:	83 81       	ldd	r24, Z+3	; 0x03
    3270:	81 fd       	sbrc	r24, 1
    3272:	03 c0       	rjmp	.+6      	; 0x327a <vfprintf+0x24>
    3274:	6f ef       	ldi	r22, 0xFF	; 255
    3276:	7f ef       	ldi	r23, 0xFF	; 255
    3278:	c6 c1       	rjmp	.+908    	; 0x3606 <vfprintf+0x3b0>
    327a:	9a e0       	ldi	r25, 0x0A	; 10
    327c:	89 2e       	mov	r8, r25
    327e:	1e 01       	movw	r2, r28
    3280:	08 94       	sec
    3282:	21 1c       	adc	r2, r1
    3284:	31 1c       	adc	r3, r1
    3286:	f3 01       	movw	r30, r6
    3288:	23 81       	ldd	r18, Z+3	; 0x03
    328a:	f2 01       	movw	r30, r4
    328c:	23 fd       	sbrc	r18, 3
    328e:	85 91       	lpm	r24, Z+
    3290:	23 ff       	sbrs	r18, 3
    3292:	81 91       	ld	r24, Z+
    3294:	2f 01       	movw	r4, r30
    3296:	88 23       	and	r24, r24
    3298:	09 f4       	brne	.+2      	; 0x329c <vfprintf+0x46>
    329a:	b2 c1       	rjmp	.+868    	; 0x3600 <vfprintf+0x3aa>
    329c:	85 32       	cpi	r24, 0x25	; 37
    329e:	39 f4       	brne	.+14     	; 0x32ae <vfprintf+0x58>
    32a0:	23 fd       	sbrc	r18, 3
    32a2:	85 91       	lpm	r24, Z+
    32a4:	23 ff       	sbrs	r18, 3
    32a6:	81 91       	ld	r24, Z+
    32a8:	2f 01       	movw	r4, r30
    32aa:	85 32       	cpi	r24, 0x25	; 37
    32ac:	29 f4       	brne	.+10     	; 0x32b8 <vfprintf+0x62>
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	b3 01       	movw	r22, r6
    32b2:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    32b6:	e7 cf       	rjmp	.-50     	; 0x3286 <vfprintf+0x30>
    32b8:	98 2f       	mov	r25, r24
    32ba:	ff 24       	eor	r15, r15
    32bc:	ee 24       	eor	r14, r14
    32be:	99 24       	eor	r9, r9
    32c0:	ff e1       	ldi	r31, 0x1F	; 31
    32c2:	ff 15       	cp	r31, r15
    32c4:	d0 f0       	brcs	.+52     	; 0x32fa <vfprintf+0xa4>
    32c6:	9b 32       	cpi	r25, 0x2B	; 43
    32c8:	69 f0       	breq	.+26     	; 0x32e4 <vfprintf+0x8e>
    32ca:	9c 32       	cpi	r25, 0x2C	; 44
    32cc:	28 f4       	brcc	.+10     	; 0x32d8 <vfprintf+0x82>
    32ce:	90 32       	cpi	r25, 0x20	; 32
    32d0:	59 f0       	breq	.+22     	; 0x32e8 <vfprintf+0x92>
    32d2:	93 32       	cpi	r25, 0x23	; 35
    32d4:	91 f4       	brne	.+36     	; 0x32fa <vfprintf+0xa4>
    32d6:	0e c0       	rjmp	.+28     	; 0x32f4 <vfprintf+0x9e>
    32d8:	9d 32       	cpi	r25, 0x2D	; 45
    32da:	49 f0       	breq	.+18     	; 0x32ee <vfprintf+0x98>
    32dc:	90 33       	cpi	r25, 0x30	; 48
    32de:	69 f4       	brne	.+26     	; 0x32fa <vfprintf+0xa4>
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	24 c0       	rjmp	.+72     	; 0x332c <vfprintf+0xd6>
    32e4:	52 e0       	ldi	r21, 0x02	; 2
    32e6:	f5 2a       	or	r15, r21
    32e8:	84 e0       	ldi	r24, 0x04	; 4
    32ea:	f8 2a       	or	r15, r24
    32ec:	28 c0       	rjmp	.+80     	; 0x333e <vfprintf+0xe8>
    32ee:	98 e0       	ldi	r25, 0x08	; 8
    32f0:	f9 2a       	or	r15, r25
    32f2:	25 c0       	rjmp	.+74     	; 0x333e <vfprintf+0xe8>
    32f4:	e0 e1       	ldi	r30, 0x10	; 16
    32f6:	fe 2a       	or	r15, r30
    32f8:	22 c0       	rjmp	.+68     	; 0x333e <vfprintf+0xe8>
    32fa:	f7 fc       	sbrc	r15, 7
    32fc:	29 c0       	rjmp	.+82     	; 0x3350 <vfprintf+0xfa>
    32fe:	89 2f       	mov	r24, r25
    3300:	80 53       	subi	r24, 0x30	; 48
    3302:	8a 30       	cpi	r24, 0x0A	; 10
    3304:	70 f4       	brcc	.+28     	; 0x3322 <vfprintf+0xcc>
    3306:	f6 fe       	sbrs	r15, 6
    3308:	05 c0       	rjmp	.+10     	; 0x3314 <vfprintf+0xbe>
    330a:	98 9c       	mul	r9, r8
    330c:	90 2c       	mov	r9, r0
    330e:	11 24       	eor	r1, r1
    3310:	98 0e       	add	r9, r24
    3312:	15 c0       	rjmp	.+42     	; 0x333e <vfprintf+0xe8>
    3314:	e8 9c       	mul	r14, r8
    3316:	e0 2c       	mov	r14, r0
    3318:	11 24       	eor	r1, r1
    331a:	e8 0e       	add	r14, r24
    331c:	f0 e2       	ldi	r31, 0x20	; 32
    331e:	ff 2a       	or	r15, r31
    3320:	0e c0       	rjmp	.+28     	; 0x333e <vfprintf+0xe8>
    3322:	9e 32       	cpi	r25, 0x2E	; 46
    3324:	29 f4       	brne	.+10     	; 0x3330 <vfprintf+0xda>
    3326:	f6 fc       	sbrc	r15, 6
    3328:	6b c1       	rjmp	.+726    	; 0x3600 <vfprintf+0x3aa>
    332a:	40 e4       	ldi	r20, 0x40	; 64
    332c:	f4 2a       	or	r15, r20
    332e:	07 c0       	rjmp	.+14     	; 0x333e <vfprintf+0xe8>
    3330:	9c 36       	cpi	r25, 0x6C	; 108
    3332:	19 f4       	brne	.+6      	; 0x333a <vfprintf+0xe4>
    3334:	50 e8       	ldi	r21, 0x80	; 128
    3336:	f5 2a       	or	r15, r21
    3338:	02 c0       	rjmp	.+4      	; 0x333e <vfprintf+0xe8>
    333a:	98 36       	cpi	r25, 0x68	; 104
    333c:	49 f4       	brne	.+18     	; 0x3350 <vfprintf+0xfa>
    333e:	f2 01       	movw	r30, r4
    3340:	23 fd       	sbrc	r18, 3
    3342:	95 91       	lpm	r25, Z+
    3344:	23 ff       	sbrs	r18, 3
    3346:	91 91       	ld	r25, Z+
    3348:	2f 01       	movw	r4, r30
    334a:	99 23       	and	r25, r25
    334c:	09 f0       	breq	.+2      	; 0x3350 <vfprintf+0xfa>
    334e:	b8 cf       	rjmp	.-144    	; 0x32c0 <vfprintf+0x6a>
    3350:	89 2f       	mov	r24, r25
    3352:	85 54       	subi	r24, 0x45	; 69
    3354:	83 30       	cpi	r24, 0x03	; 3
    3356:	18 f0       	brcs	.+6      	; 0x335e <vfprintf+0x108>
    3358:	80 52       	subi	r24, 0x20	; 32
    335a:	83 30       	cpi	r24, 0x03	; 3
    335c:	38 f4       	brcc	.+14     	; 0x336c <vfprintf+0x116>
    335e:	44 e0       	ldi	r20, 0x04	; 4
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	a4 0e       	add	r10, r20
    3364:	b5 1e       	adc	r11, r21
    3366:	5f e3       	ldi	r21, 0x3F	; 63
    3368:	59 83       	std	Y+1, r21	; 0x01
    336a:	0f c0       	rjmp	.+30     	; 0x338a <vfprintf+0x134>
    336c:	93 36       	cpi	r25, 0x63	; 99
    336e:	31 f0       	breq	.+12     	; 0x337c <vfprintf+0x126>
    3370:	93 37       	cpi	r25, 0x73	; 115
    3372:	79 f0       	breq	.+30     	; 0x3392 <vfprintf+0x13c>
    3374:	93 35       	cpi	r25, 0x53	; 83
    3376:	09 f0       	breq	.+2      	; 0x337a <vfprintf+0x124>
    3378:	56 c0       	rjmp	.+172    	; 0x3426 <vfprintf+0x1d0>
    337a:	20 c0       	rjmp	.+64     	; 0x33bc <vfprintf+0x166>
    337c:	f5 01       	movw	r30, r10
    337e:	80 81       	ld	r24, Z
    3380:	89 83       	std	Y+1, r24	; 0x01
    3382:	42 e0       	ldi	r20, 0x02	; 2
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	a4 0e       	add	r10, r20
    3388:	b5 1e       	adc	r11, r21
    338a:	61 01       	movw	r12, r2
    338c:	01 e0       	ldi	r16, 0x01	; 1
    338e:	10 e0       	ldi	r17, 0x00	; 0
    3390:	12 c0       	rjmp	.+36     	; 0x33b6 <vfprintf+0x160>
    3392:	f5 01       	movw	r30, r10
    3394:	c0 80       	ld	r12, Z
    3396:	d1 80       	ldd	r13, Z+1	; 0x01
    3398:	f6 fc       	sbrc	r15, 6
    339a:	03 c0       	rjmp	.+6      	; 0x33a2 <vfprintf+0x14c>
    339c:	6f ef       	ldi	r22, 0xFF	; 255
    339e:	7f ef       	ldi	r23, 0xFF	; 255
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <vfprintf+0x150>
    33a2:	69 2d       	mov	r22, r9
    33a4:	70 e0       	ldi	r23, 0x00	; 0
    33a6:	42 e0       	ldi	r20, 0x02	; 2
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	a4 0e       	add	r10, r20
    33ac:	b5 1e       	adc	r11, r21
    33ae:	c6 01       	movw	r24, r12
    33b0:	0e 94 13 1b 	call	0x3626	; 0x3626 <strnlen>
    33b4:	8c 01       	movw	r16, r24
    33b6:	5f e7       	ldi	r21, 0x7F	; 127
    33b8:	f5 22       	and	r15, r21
    33ba:	14 c0       	rjmp	.+40     	; 0x33e4 <vfprintf+0x18e>
    33bc:	f5 01       	movw	r30, r10
    33be:	c0 80       	ld	r12, Z
    33c0:	d1 80       	ldd	r13, Z+1	; 0x01
    33c2:	f6 fc       	sbrc	r15, 6
    33c4:	03 c0       	rjmp	.+6      	; 0x33cc <vfprintf+0x176>
    33c6:	6f ef       	ldi	r22, 0xFF	; 255
    33c8:	7f ef       	ldi	r23, 0xFF	; 255
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <vfprintf+0x17a>
    33cc:	69 2d       	mov	r22, r9
    33ce:	70 e0       	ldi	r23, 0x00	; 0
    33d0:	42 e0       	ldi	r20, 0x02	; 2
    33d2:	50 e0       	ldi	r21, 0x00	; 0
    33d4:	a4 0e       	add	r10, r20
    33d6:	b5 1e       	adc	r11, r21
    33d8:	c6 01       	movw	r24, r12
    33da:	0e 94 08 1b 	call	0x3610	; 0x3610 <strnlen_P>
    33de:	8c 01       	movw	r16, r24
    33e0:	50 e8       	ldi	r21, 0x80	; 128
    33e2:	f5 2a       	or	r15, r21
    33e4:	f3 fe       	sbrs	r15, 3
    33e6:	07 c0       	rjmp	.+14     	; 0x33f6 <vfprintf+0x1a0>
    33e8:	1a c0       	rjmp	.+52     	; 0x341e <vfprintf+0x1c8>
    33ea:	80 e2       	ldi	r24, 0x20	; 32
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	b3 01       	movw	r22, r6
    33f0:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    33f4:	ea 94       	dec	r14
    33f6:	8e 2d       	mov	r24, r14
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	08 17       	cp	r16, r24
    33fc:	19 07       	cpc	r17, r25
    33fe:	a8 f3       	brcs	.-22     	; 0x33ea <vfprintf+0x194>
    3400:	0e c0       	rjmp	.+28     	; 0x341e <vfprintf+0x1c8>
    3402:	f6 01       	movw	r30, r12
    3404:	f7 fc       	sbrc	r15, 7
    3406:	85 91       	lpm	r24, Z+
    3408:	f7 fe       	sbrs	r15, 7
    340a:	81 91       	ld	r24, Z+
    340c:	6f 01       	movw	r12, r30
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	b3 01       	movw	r22, r6
    3412:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    3416:	e1 10       	cpse	r14, r1
    3418:	ea 94       	dec	r14
    341a:	01 50       	subi	r16, 0x01	; 1
    341c:	10 40       	sbci	r17, 0x00	; 0
    341e:	01 15       	cp	r16, r1
    3420:	11 05       	cpc	r17, r1
    3422:	79 f7       	brne	.-34     	; 0x3402 <vfprintf+0x1ac>
    3424:	ea c0       	rjmp	.+468    	; 0x35fa <vfprintf+0x3a4>
    3426:	94 36       	cpi	r25, 0x64	; 100
    3428:	11 f0       	breq	.+4      	; 0x342e <vfprintf+0x1d8>
    342a:	99 36       	cpi	r25, 0x69	; 105
    342c:	69 f5       	brne	.+90     	; 0x3488 <vfprintf+0x232>
    342e:	f7 fe       	sbrs	r15, 7
    3430:	08 c0       	rjmp	.+16     	; 0x3442 <vfprintf+0x1ec>
    3432:	f5 01       	movw	r30, r10
    3434:	20 81       	ld	r18, Z
    3436:	31 81       	ldd	r19, Z+1	; 0x01
    3438:	42 81       	ldd	r20, Z+2	; 0x02
    343a:	53 81       	ldd	r21, Z+3	; 0x03
    343c:	84 e0       	ldi	r24, 0x04	; 4
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0a c0       	rjmp	.+20     	; 0x3456 <vfprintf+0x200>
    3442:	f5 01       	movw	r30, r10
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	9c 01       	movw	r18, r24
    344a:	44 27       	eor	r20, r20
    344c:	37 fd       	sbrc	r19, 7
    344e:	40 95       	com	r20
    3450:	54 2f       	mov	r21, r20
    3452:	82 e0       	ldi	r24, 0x02	; 2
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	a8 0e       	add	r10, r24
    3458:	b9 1e       	adc	r11, r25
    345a:	9f e6       	ldi	r25, 0x6F	; 111
    345c:	f9 22       	and	r15, r25
    345e:	57 ff       	sbrs	r21, 7
    3460:	09 c0       	rjmp	.+18     	; 0x3474 <vfprintf+0x21e>
    3462:	50 95       	com	r21
    3464:	40 95       	com	r20
    3466:	30 95       	com	r19
    3468:	21 95       	neg	r18
    346a:	3f 4f       	sbci	r19, 0xFF	; 255
    346c:	4f 4f       	sbci	r20, 0xFF	; 255
    346e:	5f 4f       	sbci	r21, 0xFF	; 255
    3470:	e0 e8       	ldi	r30, 0x80	; 128
    3472:	fe 2a       	or	r15, r30
    3474:	ca 01       	movw	r24, r20
    3476:	b9 01       	movw	r22, r18
    3478:	a1 01       	movw	r20, r2
    347a:	2a e0       	ldi	r18, 0x0A	; 10
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__ultoa_invert>
    3482:	d8 2e       	mov	r13, r24
    3484:	d2 18       	sub	r13, r2
    3486:	40 c0       	rjmp	.+128    	; 0x3508 <vfprintf+0x2b2>
    3488:	95 37       	cpi	r25, 0x75	; 117
    348a:	29 f4       	brne	.+10     	; 0x3496 <vfprintf+0x240>
    348c:	1f 2d       	mov	r17, r15
    348e:	1f 7e       	andi	r17, 0xEF	; 239
    3490:	2a e0       	ldi	r18, 0x0A	; 10
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	1d c0       	rjmp	.+58     	; 0x34d0 <vfprintf+0x27a>
    3496:	1f 2d       	mov	r17, r15
    3498:	19 7f       	andi	r17, 0xF9	; 249
    349a:	9f 36       	cpi	r25, 0x6F	; 111
    349c:	61 f0       	breq	.+24     	; 0x34b6 <vfprintf+0x260>
    349e:	90 37       	cpi	r25, 0x70	; 112
    34a0:	20 f4       	brcc	.+8      	; 0x34aa <vfprintf+0x254>
    34a2:	98 35       	cpi	r25, 0x58	; 88
    34a4:	09 f0       	breq	.+2      	; 0x34a8 <vfprintf+0x252>
    34a6:	ac c0       	rjmp	.+344    	; 0x3600 <vfprintf+0x3aa>
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <vfprintf+0x272>
    34aa:	90 37       	cpi	r25, 0x70	; 112
    34ac:	39 f0       	breq	.+14     	; 0x34bc <vfprintf+0x266>
    34ae:	98 37       	cpi	r25, 0x78	; 120
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <vfprintf+0x25e>
    34b2:	a6 c0       	rjmp	.+332    	; 0x3600 <vfprintf+0x3aa>
    34b4:	04 c0       	rjmp	.+8      	; 0x34be <vfprintf+0x268>
    34b6:	28 e0       	ldi	r18, 0x08	; 8
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	0a c0       	rjmp	.+20     	; 0x34d0 <vfprintf+0x27a>
    34bc:	10 61       	ori	r17, 0x10	; 16
    34be:	14 fd       	sbrc	r17, 4
    34c0:	14 60       	ori	r17, 0x04	; 4
    34c2:	20 e1       	ldi	r18, 0x10	; 16
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	04 c0       	rjmp	.+8      	; 0x34d0 <vfprintf+0x27a>
    34c8:	14 fd       	sbrc	r17, 4
    34ca:	16 60       	ori	r17, 0x06	; 6
    34cc:	20 e1       	ldi	r18, 0x10	; 16
    34ce:	32 e0       	ldi	r19, 0x02	; 2
    34d0:	17 ff       	sbrs	r17, 7
    34d2:	08 c0       	rjmp	.+16     	; 0x34e4 <vfprintf+0x28e>
    34d4:	f5 01       	movw	r30, r10
    34d6:	60 81       	ld	r22, Z
    34d8:	71 81       	ldd	r23, Z+1	; 0x01
    34da:	82 81       	ldd	r24, Z+2	; 0x02
    34dc:	93 81       	ldd	r25, Z+3	; 0x03
    34de:	44 e0       	ldi	r20, 0x04	; 4
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	08 c0       	rjmp	.+16     	; 0x34f4 <vfprintf+0x29e>
    34e4:	f5 01       	movw	r30, r10
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	bc 01       	movw	r22, r24
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	42 e0       	ldi	r20, 0x02	; 2
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	a4 0e       	add	r10, r20
    34f6:	b5 1e       	adc	r11, r21
    34f8:	a1 01       	movw	r20, r2
    34fa:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__ultoa_invert>
    34fe:	d8 2e       	mov	r13, r24
    3500:	d2 18       	sub	r13, r2
    3502:	8f e7       	ldi	r24, 0x7F	; 127
    3504:	f8 2e       	mov	r15, r24
    3506:	f1 22       	and	r15, r17
    3508:	f6 fe       	sbrs	r15, 6
    350a:	0b c0       	rjmp	.+22     	; 0x3522 <vfprintf+0x2cc>
    350c:	5e ef       	ldi	r21, 0xFE	; 254
    350e:	f5 22       	and	r15, r21
    3510:	d9 14       	cp	r13, r9
    3512:	38 f4       	brcc	.+14     	; 0x3522 <vfprintf+0x2cc>
    3514:	f4 fe       	sbrs	r15, 4
    3516:	07 c0       	rjmp	.+14     	; 0x3526 <vfprintf+0x2d0>
    3518:	f2 fc       	sbrc	r15, 2
    351a:	05 c0       	rjmp	.+10     	; 0x3526 <vfprintf+0x2d0>
    351c:	8f ee       	ldi	r24, 0xEF	; 239
    351e:	f8 22       	and	r15, r24
    3520:	02 c0       	rjmp	.+4      	; 0x3526 <vfprintf+0x2d0>
    3522:	1d 2d       	mov	r17, r13
    3524:	01 c0       	rjmp	.+2      	; 0x3528 <vfprintf+0x2d2>
    3526:	19 2d       	mov	r17, r9
    3528:	f4 fe       	sbrs	r15, 4
    352a:	0d c0       	rjmp	.+26     	; 0x3546 <vfprintf+0x2f0>
    352c:	fe 01       	movw	r30, r28
    352e:	ed 0d       	add	r30, r13
    3530:	f1 1d       	adc	r31, r1
    3532:	80 81       	ld	r24, Z
    3534:	80 33       	cpi	r24, 0x30	; 48
    3536:	19 f4       	brne	.+6      	; 0x353e <vfprintf+0x2e8>
    3538:	99 ee       	ldi	r25, 0xE9	; 233
    353a:	f9 22       	and	r15, r25
    353c:	08 c0       	rjmp	.+16     	; 0x354e <vfprintf+0x2f8>
    353e:	1f 5f       	subi	r17, 0xFF	; 255
    3540:	f2 fe       	sbrs	r15, 2
    3542:	05 c0       	rjmp	.+10     	; 0x354e <vfprintf+0x2f8>
    3544:	03 c0       	rjmp	.+6      	; 0x354c <vfprintf+0x2f6>
    3546:	8f 2d       	mov	r24, r15
    3548:	86 78       	andi	r24, 0x86	; 134
    354a:	09 f0       	breq	.+2      	; 0x354e <vfprintf+0x2f8>
    354c:	1f 5f       	subi	r17, 0xFF	; 255
    354e:	0f 2d       	mov	r16, r15
    3550:	f3 fc       	sbrc	r15, 3
    3552:	14 c0       	rjmp	.+40     	; 0x357c <vfprintf+0x326>
    3554:	f0 fe       	sbrs	r15, 0
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <vfprintf+0x320>
    3558:	1e 15       	cp	r17, r14
    355a:	10 f0       	brcs	.+4      	; 0x3560 <vfprintf+0x30a>
    355c:	9d 2c       	mov	r9, r13
    355e:	0b c0       	rjmp	.+22     	; 0x3576 <vfprintf+0x320>
    3560:	9d 2c       	mov	r9, r13
    3562:	9e 0c       	add	r9, r14
    3564:	91 1a       	sub	r9, r17
    3566:	1e 2d       	mov	r17, r14
    3568:	06 c0       	rjmp	.+12     	; 0x3576 <vfprintf+0x320>
    356a:	80 e2       	ldi	r24, 0x20	; 32
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	b3 01       	movw	r22, r6
    3570:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    3574:	1f 5f       	subi	r17, 0xFF	; 255
    3576:	1e 15       	cp	r17, r14
    3578:	c0 f3       	brcs	.-16     	; 0x356a <vfprintf+0x314>
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <vfprintf+0x32e>
    357c:	1e 15       	cp	r17, r14
    357e:	10 f4       	brcc	.+4      	; 0x3584 <vfprintf+0x32e>
    3580:	e1 1a       	sub	r14, r17
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <vfprintf+0x330>
    3584:	ee 24       	eor	r14, r14
    3586:	04 ff       	sbrs	r16, 4
    3588:	0f c0       	rjmp	.+30     	; 0x35a8 <vfprintf+0x352>
    358a:	80 e3       	ldi	r24, 0x30	; 48
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	b3 01       	movw	r22, r6
    3590:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    3594:	02 ff       	sbrs	r16, 2
    3596:	1d c0       	rjmp	.+58     	; 0x35d2 <vfprintf+0x37c>
    3598:	01 fd       	sbrc	r16, 1
    359a:	03 c0       	rjmp	.+6      	; 0x35a2 <vfprintf+0x34c>
    359c:	88 e7       	ldi	r24, 0x78	; 120
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e c0       	rjmp	.+28     	; 0x35be <vfprintf+0x368>
    35a2:	88 e5       	ldi	r24, 0x58	; 88
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0b c0       	rjmp	.+22     	; 0x35be <vfprintf+0x368>
    35a8:	80 2f       	mov	r24, r16
    35aa:	86 78       	andi	r24, 0x86	; 134
    35ac:	91 f0       	breq	.+36     	; 0x35d2 <vfprintf+0x37c>
    35ae:	01 ff       	sbrs	r16, 1
    35b0:	02 c0       	rjmp	.+4      	; 0x35b6 <vfprintf+0x360>
    35b2:	8b e2       	ldi	r24, 0x2B	; 43
    35b4:	01 c0       	rjmp	.+2      	; 0x35b8 <vfprintf+0x362>
    35b6:	80 e2       	ldi	r24, 0x20	; 32
    35b8:	f7 fc       	sbrc	r15, 7
    35ba:	8d e2       	ldi	r24, 0x2D	; 45
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	b3 01       	movw	r22, r6
    35c0:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    35c4:	06 c0       	rjmp	.+12     	; 0x35d2 <vfprintf+0x37c>
    35c6:	80 e3       	ldi	r24, 0x30	; 48
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	b3 01       	movw	r22, r6
    35cc:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    35d0:	9a 94       	dec	r9
    35d2:	d9 14       	cp	r13, r9
    35d4:	c0 f3       	brcs	.-16     	; 0x35c6 <vfprintf+0x370>
    35d6:	da 94       	dec	r13
    35d8:	f1 01       	movw	r30, r2
    35da:	ed 0d       	add	r30, r13
    35dc:	f1 1d       	adc	r31, r1
    35de:	80 81       	ld	r24, Z
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	b3 01       	movw	r22, r6
    35e4:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    35e8:	dd 20       	and	r13, r13
    35ea:	a9 f7       	brne	.-22     	; 0x35d6 <vfprintf+0x380>
    35ec:	06 c0       	rjmp	.+12     	; 0x35fa <vfprintf+0x3a4>
    35ee:	80 e2       	ldi	r24, 0x20	; 32
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	b3 01       	movw	r22, r6
    35f4:	0e 94 1e 1b 	call	0x363c	; 0x363c <fputc>
    35f8:	ea 94       	dec	r14
    35fa:	ee 20       	and	r14, r14
    35fc:	c1 f7       	brne	.-16     	; 0x35ee <vfprintf+0x398>
    35fe:	43 ce       	rjmp	.-890    	; 0x3286 <vfprintf+0x30>
    3600:	f3 01       	movw	r30, r6
    3602:	66 81       	ldd	r22, Z+6	; 0x06
    3604:	77 81       	ldd	r23, Z+7	; 0x07
    3606:	cb 01       	movw	r24, r22
    3608:	2b 96       	adiw	r28, 0x0b	; 11
    360a:	e2 e1       	ldi	r30, 0x12	; 18
    360c:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__>

00003610 <strnlen_P>:
    3610:	fc 01       	movw	r30, r24
    3612:	05 90       	lpm	r0, Z+
    3614:	61 50       	subi	r22, 0x01	; 1
    3616:	70 40       	sbci	r23, 0x00	; 0
    3618:	01 10       	cpse	r0, r1
    361a:	d8 f7       	brcc	.-10     	; 0x3612 <strnlen_P+0x2>
    361c:	80 95       	com	r24
    361e:	90 95       	com	r25
    3620:	8e 0f       	add	r24, r30
    3622:	9f 1f       	adc	r25, r31
    3624:	08 95       	ret

00003626 <strnlen>:
    3626:	fc 01       	movw	r30, r24
    3628:	61 50       	subi	r22, 0x01	; 1
    362a:	70 40       	sbci	r23, 0x00	; 0
    362c:	01 90       	ld	r0, Z+
    362e:	01 10       	cpse	r0, r1
    3630:	d8 f7       	brcc	.-10     	; 0x3628 <strnlen+0x2>
    3632:	80 95       	com	r24
    3634:	90 95       	com	r25
    3636:	8e 0f       	add	r24, r30
    3638:	9f 1f       	adc	r25, r31
    363a:	08 95       	ret

0000363c <fputc>:
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	8c 01       	movw	r16, r24
    3646:	eb 01       	movw	r28, r22
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	81 ff       	sbrs	r24, 1
    364c:	1b c0       	rjmp	.+54     	; 0x3684 <fputc+0x48>
    364e:	82 ff       	sbrs	r24, 2
    3650:	0d c0       	rjmp	.+26     	; 0x366c <fputc+0x30>
    3652:	2e 81       	ldd	r18, Y+6	; 0x06
    3654:	3f 81       	ldd	r19, Y+7	; 0x07
    3656:	8c 81       	ldd	r24, Y+4	; 0x04
    3658:	9d 81       	ldd	r25, Y+5	; 0x05
    365a:	28 17       	cp	r18, r24
    365c:	39 07       	cpc	r19, r25
    365e:	64 f4       	brge	.+24     	; 0x3678 <fputc+0x3c>
    3660:	e8 81       	ld	r30, Y
    3662:	f9 81       	ldd	r31, Y+1	; 0x01
    3664:	01 93       	st	Z+, r16
    3666:	f9 83       	std	Y+1, r31	; 0x01
    3668:	e8 83       	st	Y, r30
    366a:	06 c0       	rjmp	.+12     	; 0x3678 <fputc+0x3c>
    366c:	e8 85       	ldd	r30, Y+8	; 0x08
    366e:	f9 85       	ldd	r31, Y+9	; 0x09
    3670:	80 2f       	mov	r24, r16
    3672:	09 95       	icall
    3674:	89 2b       	or	r24, r25
    3676:	31 f4       	brne	.+12     	; 0x3684 <fputc+0x48>
    3678:	8e 81       	ldd	r24, Y+6	; 0x06
    367a:	9f 81       	ldd	r25, Y+7	; 0x07
    367c:	01 96       	adiw	r24, 0x01	; 1
    367e:	9f 83       	std	Y+7, r25	; 0x07
    3680:	8e 83       	std	Y+6, r24	; 0x06
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <fputc+0x4c>
    3684:	0f ef       	ldi	r16, 0xFF	; 255
    3686:	1f ef       	ldi	r17, 0xFF	; 255
    3688:	c8 01       	movw	r24, r16
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	08 95       	ret

00003694 <__ultoa_invert>:
    3694:	fa 01       	movw	r30, r20
    3696:	aa 27       	eor	r26, r26
    3698:	28 30       	cpi	r18, 0x08	; 8
    369a:	51 f1       	breq	.+84     	; 0x36f0 <__ultoa_invert+0x5c>
    369c:	20 31       	cpi	r18, 0x10	; 16
    369e:	81 f1       	breq	.+96     	; 0x3700 <__ultoa_invert+0x6c>
    36a0:	e8 94       	clt
    36a2:	6f 93       	push	r22
    36a4:	6e 7f       	andi	r22, 0xFE	; 254
    36a6:	6e 5f       	subi	r22, 0xFE	; 254
    36a8:	7f 4f       	sbci	r23, 0xFF	; 255
    36aa:	8f 4f       	sbci	r24, 0xFF	; 255
    36ac:	9f 4f       	sbci	r25, 0xFF	; 255
    36ae:	af 4f       	sbci	r26, 0xFF	; 255
    36b0:	b1 e0       	ldi	r27, 0x01	; 1
    36b2:	3e d0       	rcall	.+124    	; 0x3730 <__ultoa_invert+0x9c>
    36b4:	b4 e0       	ldi	r27, 0x04	; 4
    36b6:	3c d0       	rcall	.+120    	; 0x3730 <__ultoa_invert+0x9c>
    36b8:	67 0f       	add	r22, r23
    36ba:	78 1f       	adc	r23, r24
    36bc:	89 1f       	adc	r24, r25
    36be:	9a 1f       	adc	r25, r26
    36c0:	a1 1d       	adc	r26, r1
    36c2:	68 0f       	add	r22, r24
    36c4:	79 1f       	adc	r23, r25
    36c6:	8a 1f       	adc	r24, r26
    36c8:	91 1d       	adc	r25, r1
    36ca:	a1 1d       	adc	r26, r1
    36cc:	6a 0f       	add	r22, r26
    36ce:	71 1d       	adc	r23, r1
    36d0:	81 1d       	adc	r24, r1
    36d2:	91 1d       	adc	r25, r1
    36d4:	a1 1d       	adc	r26, r1
    36d6:	20 d0       	rcall	.+64     	; 0x3718 <__ultoa_invert+0x84>
    36d8:	09 f4       	brne	.+2      	; 0x36dc <__ultoa_invert+0x48>
    36da:	68 94       	set
    36dc:	3f 91       	pop	r19
    36de:	2a e0       	ldi	r18, 0x0A	; 10
    36e0:	26 9f       	mul	r18, r22
    36e2:	11 24       	eor	r1, r1
    36e4:	30 19       	sub	r19, r0
    36e6:	30 5d       	subi	r19, 0xD0	; 208
    36e8:	31 93       	st	Z+, r19
    36ea:	de f6       	brtc	.-74     	; 0x36a2 <__ultoa_invert+0xe>
    36ec:	cf 01       	movw	r24, r30
    36ee:	08 95       	ret
    36f0:	46 2f       	mov	r20, r22
    36f2:	47 70       	andi	r20, 0x07	; 7
    36f4:	40 5d       	subi	r20, 0xD0	; 208
    36f6:	41 93       	st	Z+, r20
    36f8:	b3 e0       	ldi	r27, 0x03	; 3
    36fa:	0f d0       	rcall	.+30     	; 0x371a <__ultoa_invert+0x86>
    36fc:	c9 f7       	brne	.-14     	; 0x36f0 <__ultoa_invert+0x5c>
    36fe:	f6 cf       	rjmp	.-20     	; 0x36ec <__ultoa_invert+0x58>
    3700:	46 2f       	mov	r20, r22
    3702:	4f 70       	andi	r20, 0x0F	; 15
    3704:	40 5d       	subi	r20, 0xD0	; 208
    3706:	4a 33       	cpi	r20, 0x3A	; 58
    3708:	18 f0       	brcs	.+6      	; 0x3710 <__ultoa_invert+0x7c>
    370a:	49 5d       	subi	r20, 0xD9	; 217
    370c:	31 fd       	sbrc	r19, 1
    370e:	40 52       	subi	r20, 0x20	; 32
    3710:	41 93       	st	Z+, r20
    3712:	02 d0       	rcall	.+4      	; 0x3718 <__ultoa_invert+0x84>
    3714:	a9 f7       	brne	.-22     	; 0x3700 <__ultoa_invert+0x6c>
    3716:	ea cf       	rjmp	.-44     	; 0x36ec <__ultoa_invert+0x58>
    3718:	b4 e0       	ldi	r27, 0x04	; 4
    371a:	a6 95       	lsr	r26
    371c:	97 95       	ror	r25
    371e:	87 95       	ror	r24
    3720:	77 95       	ror	r23
    3722:	67 95       	ror	r22
    3724:	ba 95       	dec	r27
    3726:	c9 f7       	brne	.-14     	; 0x371a <__ultoa_invert+0x86>
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	61 05       	cpc	r22, r1
    372c:	71 05       	cpc	r23, r1
    372e:	08 95       	ret
    3730:	9b 01       	movw	r18, r22
    3732:	ac 01       	movw	r20, r24
    3734:	0a 2e       	mov	r0, r26
    3736:	06 94       	lsr	r0
    3738:	57 95       	ror	r21
    373a:	47 95       	ror	r20
    373c:	37 95       	ror	r19
    373e:	27 95       	ror	r18
    3740:	ba 95       	dec	r27
    3742:	c9 f7       	brne	.-14     	; 0x3736 <__ultoa_invert+0xa2>
    3744:	62 0f       	add	r22, r18
    3746:	73 1f       	adc	r23, r19
    3748:	84 1f       	adc	r24, r20
    374a:	95 1f       	adc	r25, r21
    374c:	a0 1d       	adc	r26, r0
    374e:	08 95       	ret

00003750 <_exit>:
    3750:	f8 94       	cli

00003752 <__stop_program>:
    3752:	ff cf       	rjmp	.-2      	; 0x3752 <__stop_program>
